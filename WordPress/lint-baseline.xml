<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.1.3">

    <issue
        id="ClickableViewAccessibility"
        message="Custom view ``EditTextWithKeyBackListener`` has `setOnTouchListener` called on it but does not override `performClick`"
        errorLine1="        mTitle.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/org/wordpress/android/editor/GutenbergEditorFragment.java"
            line="282"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        message="Custom view ``SourceViewEditText`` has `setOnTouchListener` called on it but does not override `performClick`"
        errorLine1="        mSource.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/org/wordpress/android/editor/GutenbergEditorFragment.java"
            line="284"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        message="`GutenbergEditorFragment#onTouch` should call `View#performClick` when a click is detected"
        errorLine1="    public boolean onTouch(View view, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="src/main/java/org/wordpress/android/editor/GutenbergEditorFragment.java"
            line="1478"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        message="Custom view `RecyclableWrapperViewGroup` overrides `onTouchEvent` but not `performClick`"
        errorLine1="        public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                       ~~~~~~~~~~~~">
        <location
            file="src/main/java/com/github/godness84/RNRecyclerViewList/RecyclerViewBackedScrollView.java"
            line="146"
            column="24"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        message="Custom view `RecyclerViewBackedScrollView` overrides `onTouchEvent` but not `performClick`"
        errorLine1="    public boolean onTouchEvent(MotionEvent ev) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="src/main/java/com/github/godness84/RNRecyclerViewList/RecyclerViewBackedScrollView.java"
            line="330"
            column="20"/>
    </issue>

    <issue
        id="ExifInterface"
        severity="Warning"
        message="Avoid using `android.media.ExifInterface`; use `android.support.media.ExifInterface` from the support library instead"
        category="Correctness"
        priority="6"
        summary="Using `android.media.ExifInterface`"
        explanation="The `android.media.ExifInterface` implementation has some known security bugs in older versions of Android. There is a new implementation available of this library in the support library, which is preferable."
        errorLine1="import android.media.ExifInterface;"
        errorLine2="       ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/ImageUtils.java"
            line="17"
            column="8"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`he`&quot; should be called &quot;`iw`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:&#xA;&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.&#xA;&#xA;Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.&#xA;&#xA;To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html">
        <location
            file="../WordPress/src/main/res/values-he"/>
    </issue>

    <issue
        id="LocaleFolder"
        severity="Warning"
        message="The locale folder &quot;`id`&quot; should be called &quot;`in`&quot; instead; see the `java.util.Locale` documentation"
        category="Correctness"
        priority="6"
        summary="Wrong locale name"
        explanation="From the `java.util.Locale` documentation:&#xA;&quot;Note that Java uses several deprecated two-letter codes. The Hebrew (&quot;he&quot;) language code is rewritten as &quot;iw&quot;, Indonesian (&quot;id&quot;) as &quot;in&quot;, and Yiddish (&quot;yi&quot;) as &quot;ji&quot;. This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.&#xA;&#xA;Because of this, if you add your localized resources in for example `values-he` they will not be used, since the system will look for `values-iw` instead.&#xA;&#xA;To work around this, place your resources in a `values` folder using the deprecated language code instead."
        url="http://developer.android.com/reference/java/util/Locale.html"
        urls="http://developer.android.com/reference/java/util/Locale.html">
        <location
            file="../WordPress/src/main/res/values-id"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Error"
        message="Attribute `drawableTint` is only used in API level 23 and higher (current min is 21)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="                android:drawableTint=&quot;@color/primary_500&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/people_invite_fragment.xml"
            line="133"
            column="17"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Error"
        message="Attribute `drawableTint` is only used in API level 23 and higher (current min is 21)"
        category="Correctness"
        priority="6"
        summary="Attribute unused on older versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the `minSdkVersion` attribute).&#xA;&#xA;This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.&#xA;&#xA;Note: This check does not only apply to attributes. For example, some tags can be unused too, such as the new `&lt;tag>` element in layouts introduced in API 21."
        errorLine1="        android:drawableTint=&quot;@color/neutral&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/site_creation_domain_input.xml"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="    val layout = LayoutInflater.from(context).inflate(R.layout.support_email_and_name_dialog, null)"
        errorLine2="                                                                                              ~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/support/SupportHelper.kt"
            line="96"
            column="95"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing `null` as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Layout Inflation without a Parent"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="        mContentView = LayoutInflater.from(view.getContext()).inflate(R.layout.dialog_snackbar, null);"
        errorLine2="                                                                                                ~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/widgets/WPDialogSnackbar.java"
            line="34"
            column="97"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.tools.build:gradle than 3.2.1 is available: 3.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/analytics/WordPressAnalytics/build.gradle"
            line="7"
            column="9"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.tools.build:gradle than 3.2.1 is available: 3.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/networking/WordPressNetworking/build.gradle"
            line="7"
            column="9"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.tools.build:gradle than 3.2.1 is available: 3.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/build.gradle"
            line="7"
            column="9"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.tools.build:gradle than 3.2.1 is available: 3.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/build.gradle"
            line="7"
            column="9"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:design than 27.1.1 is available: 28.0.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.android.support:design:27.1.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/build.gradle"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of org.wordpress:utils than 1.19.0 is available: 1.22"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;org.wordpress:utils:1.19.0&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/analytics/WordPressAnalytics/build.gradle"
            line="23"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:recyclerview-v7 than 27.1.1 is available: 28.0.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.android.support:recyclerview-v7:27.1.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/build.gradle"
            line="24"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of org.wordpress:utils than 1.18.1 is available: 1.22"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;org.wordpress:utils:1.18.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/networking/WordPressNetworking/build.gradle"
            line="32"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of org.wordpress:utils than 1.20.3 is available: 1.22"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation (&apos;org.wordpress:utils:1.20.3&apos;) {"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/build.gradle"
            line="34"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.android.gms:play-services-auth than 15.0.1 is available: 16.0.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    api &apos;com.google.android.gms:play-services-auth:15.0.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/build.gradle"
            line="41"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.github.bumptech.glide:glide than 4.6.1 is available: 4.8.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation &apos;com.github.bumptech.glide:glide:4.6.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/build.gradle"
            line="56"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.github.bumptech.glide:compiler than 4.6.1 is available: 4.8.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    annotationProcessor &apos;com.github.bumptech.glide:compiler:4.6.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/build.gradle"
            line="57"
            column="5"/>
    </issue>

    <issue
        id="PrivateResource"
        severity="Error"
        message="The resource `@dimen/design_fab_size_normal` is marked as private in com.android.support:design"
        category="Correctness"
        priority="3"
        summary="Using private resources"
        explanation="Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.&#xA;&#xA;To fix this, copy the resource into your own project instead."
        errorLine1="                context.getResources().getDimensionPixelSize(android.support.design.R.dimen.design_fab_size_normal);"
        errorLine2="                                                                                            ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/util/AniUtils.java"
            line="86"
            column="93"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into your application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="        mWebView.getSettings().setJavaScriptEnabled(true);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/publicize/PublicizeWebViewFragment.java"
            line="102"
            column="9"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into your application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="        mWebView.getSettings().setJavaScriptEnabled(true);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderVideoViewerActivity.java"
            line="39"
            column="9"/>
    </issue>

    <issue
        id="SetJavaScriptEnabled"
        severity="Warning"
        message="Using `setJavaScriptEnabled` can introduce XSS vulnerabilities into your application, review carefully."
        category="Security"
        priority="6"
        summary="Using `setJavaScriptEnabled`"
        explanation="Your code should not invoke `setJavaScriptEnabled` if you are not sure that your app really requires JavaScript support."
        url="http://developer.android.com/guide/practices/security.html"
        urls="http://developer.android.com/guide/practices/security.html"
        errorLine1="                webView.getSettings().setJavaScriptEnabled(true);"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/stats/StatsGeoviewsFragment.java"
            line="163"
            column="17"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkClientTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.">
        <location
            file="../org/jsoup/helper/HttpConnection$Response$2.class"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkClientTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.">
        <location
            file="../org/jsoup/helper/HttpConnection$Response$2.class"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkServerTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.">
        <location
            file="../org/jsoup/helper/HttpConnection$Response$2.class"/>
    </issue>

    <issue
        id="TrustAllX509TrustManager"
        severity="Warning"
        message="`checkServerTrusted` is empty, which could cause insecure network traffic due to trusting arbitrary TLS/SSL certificates presented by peers"
        category="Security"
        priority="6"
        summary="Insecure TLS/SSL trust manager"
        explanation="This check looks for X509TrustManager implementations whose `checkServerTrusted` or `checkClientTrusted` methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.">
        <location
            file="../org/jsoup/helper/HttpConnection$Response$2.class"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is never &lt; 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR1) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/DeviceUtils.java"
            line="52"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/DeviceUtils.java"
            line="144"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is never &lt; 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT &lt; 17) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/EditorFragment.java"
            line="571"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/EditorFragment.java"
            line="913"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is never &lt; 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT &lt;= 19) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/EditorWebView.java"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="    private static final boolean HAS_EMOJI = SDK_INT >= VERSION_CODES.JELLY_BEAN;"
        errorLine2="                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/EmoticonsUtils.java"
            line="19"
            column="46"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/MediaUtils.java"
            line="440"
            column="34"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is never &lt; 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR1) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/NetworkUtils.java"
            line="79"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/ViewUtils.java"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="Unnecessary; SDK_INT is always >= 21"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/java/org/wordpress/android/login/widgets/WPLoginInputRow.java"
            line="104"
            column="21"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="This folder configuration (`v18`) is unnecessary; `minSdkVersion` is 21. Merge all the resources in this folder into `drawable-ldrtl`."
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable-ldrtl-v18"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="This folder configuration (`v18`) is unnecessary; `minSdkVersion` is 21. Merge all the resources in this folder into `drawable-ldrtl`."
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/drawable-ldrtl-v18"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Error"
        message="This folder configuration (`v19`) is unnecessary; `minSdkVersion` is 21. Merge all the resources in this folder into `layout`."
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout-v19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.prefs.AccountSettingsFragment.LoadSitesTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadSitesTask extends AsyncTask&lt;Void, Void, Void> {"
        errorLine2="                  ~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/prefs/AccountSettingsFragment.java"
            line="339"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (anonymous android.os.AsyncTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="        new AsyncTask&lt;Void, Void, Bitmap>() {"
        errorLine2="        ^">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/posts/services/AztecVideoLoader.java"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.comments.CommentAdapter.LoadCommentsTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadCommentsTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/comments/CommentAdapter.java"
            line="407"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.posts.EditPostActivity.SavePostOnlineAndFinishTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class SavePostOnlineAndFinishTask extends AsyncTask&lt;Void, Void, Void> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/posts/EditPostActivity.java"
            line="1636"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.posts.EditPostActivity.SavePostLocallyAndFinishTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class SavePostLocallyAndFinishTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/posts/EditPostActivity.java"
            line="1680"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.posts.EditPostActivity.LoadPostContentTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadPostContentTask extends AsyncTask&lt;String, Spanned, Spanned> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/posts/EditPostActivity.java"
            line="2075"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.posts.EditPostPreviewFragment.LoadPostPreviewTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadPostPreviewTask extends AsyncTask&lt;Void, Void, Spanned> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/posts/EditPostPreviewFragment.java"
            line="104"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.posts.EditPostSettingsFragment.FetchAndSetAddressAsyncTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class FetchAndSetAddressAsyncTask extends AsyncTask&lt;Double, Void, Address> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/posts/EditPostSettingsFragment.java"
            line="928"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.editor.LegacyEditorFragment.AddMediaFileTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class AddMediaFileTask extends AsyncTask&lt;Void, Void, WPEditImageSpan> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/LegacyEditorFragment.java"
            line="1059"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.main.MeFragment.SignOutWordPressComAsync)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class SignOutWordPressComAsync extends AsyncTask&lt;Void, Void, Void> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/main/MeFragment.java"
            line="514"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.notifications.adapters.NotesAdapter.ReloadNotesFromDBTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class ReloadNotesFromDBTask extends AsyncTask&lt;Void, Void, ArrayList&lt;Note>> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/notifications/adapters/NotesAdapter.java"
            line="341"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.notifications.NotificationsDetailListFragment.LoadNoteBlocksTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadNoteBlocksTask extends AsyncTask&lt;Void, Boolean, List&lt;NoteBlock>> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/notifications/NotificationsDetailListFragment.java"
            line="322"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.photopicker.PhotoPickerAdapter.BuildDeviceMediaListTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class BuildDeviceMediaListTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/photopicker/PhotoPickerAdapter.java"
            line="411"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.uploads.PostUploadHandler.UploadPostTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class UploadPostTask extends AsyncTask&lt;PostModel, Boolean, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/uploads/PostUploadHandler.java"
            line="188"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.publicize.adapters.PublicizeServiceAdapter.LoadServicesTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadServicesTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/publicize/adapters/PublicizeServiceAdapter.java"
            line="174"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.reader.adapters.ReaderBlogAdapter.LoadBlogsTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadBlogsTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/reader/adapters/ReaderBlogAdapter.java"
            line="206"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.reader.adapters.ReaderCommentAdapter.LoadCommentsTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadCommentsTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/reader/adapters/ReaderCommentAdapter.java"
            line="512"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.reader.adapters.ReaderPostAdapter.LoadPostsTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadPostsTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/reader/adapters/ReaderPostAdapter.java"
            line="1155"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.reader.ReaderPostDetailFragment.ShowPostTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class ShowPostTask extends AsyncTask&lt;Void, Void, Boolean> {"
        errorLine2="                  ~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderPostDetailFragment.java"
            line="1098"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.reader.ReaderPostListFragment.LoadTagsTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadTagsTask extends AsyncTask&lt;Void, Void, ReaderTagList> {"
        errorLine2="                  ~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/reader/ReaderPostListFragment.java"
            line="2287"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.reader.adapters.ReaderTagAdapter.LoadTagsTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadTagsTask extends AsyncTask&lt;Void, Void, ReaderTagList> {"
        errorLine2="                  ~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/reader/adapters/ReaderTagAdapter.java"
            line="146"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.main.SitePickerAdapter.LoadSitesTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadSitesTask extends AsyncTask&lt;Void, Void, SiteList[]&gt; {"
        errorLine2="                  ~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/main/SitePickerAdapter.java"
            line="561"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="Do not place Android context classes in static fields (static reference to `StatsDatabaseHelper` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static StatsDatabaseHelper mDatabaseHelper;"
        errorLine2="            ~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/stats/datasets/StatsDatabaseHelper.java"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="This AsyncTask class should be static or leaks might occur (org.wordpress.android.ui.stats.StatsWidgetConfigureAdapter.LoadSitesTask)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private class LoadSitesTask extends AsyncTask&lt;Void, Void, Void> {"
        errorLine2="                  ~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/ui/stats/StatsWidgetConfigureAdapter.java"
            line="169"
            column="19"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="Do not place Android context classes in static fields (static reference to `RestClientUtils` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static RestClientUtils sRestClientUtils;"
        errorLine2="            ~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/WordPress.java"
            line="117"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="Do not place Android context classes in static fields (static reference to `RestClientUtils` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static RestClientUtils sRestClientUtilsVersion1p1;"
        errorLine2="            ~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/WordPress.java"
            line="118"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="Do not place Android context classes in static fields (static reference to `RestClientUtils` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static RestClientUtils sRestClientUtilsVersion1p2;"
        errorLine2="            ~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/WordPress.java"
            line="119"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="Do not place Android context classes in static fields (static reference to `RestClientUtils` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static RestClientUtils sRestClientUtilsVersion1p3;"
        errorLine2="            ~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/WordPress.java"
            line="120"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="Do not place Android context classes in static fields (static reference to `RestClientUtils` which has field `mContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static RestClientUtils sRestClientUtilsVersion0;"
        errorLine2="            ~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/WordPress.java"
            line="121"
            column="13"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Error"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static Context mContext;"
        errorLine2="            ~~~~~~">
        <location
            file="../WordPress/src/main/java/org/wordpress/android/WordPress.java"
            line="127"
            column="13"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="        &lt;LinearLayout"
        errorLine2="        ^">
        <location
            file="../WordPress/src/main/res/layout/plugin_browser_row.xml"
            line="51"
            column="9"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^">
        <location
            file="../WordPress/src/main/res/layout/start_over_preference.xml"
            line="15"
            column="5"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="            &lt;LinearLayout"
        errorLine2="            ^">
        <location
            file="../WordPress/src/main/res/layout/stats_widget_layout.xml"
            line="63"
            column="13"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="            &lt;LinearLayout"
        errorLine2="            ^">
        <location
            file="../WordPress/src/main/res/layout/stats_widget_layout.xml"
            line="109"
            column="13"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="            &lt;LinearLayout"
        errorLine2="            ^">
        <location
            file="../WordPress/src/main/res/layout/stats_widget_layout.xml"
            line="155"
            column="13"/>
    </issue>

    <issue
        id="UseCompoundDrawables"
        severity="Warning"
        message="This tag and its children can be replaced by one `&lt;TextView/>` and a compound drawable"
        category="Performance"
        priority="6"
        summary="Node can be replaced by a `TextView` with compound drawables"
        explanation="A `LinearLayout` which contains an `ImageView` and a `TextView` can be more efficiently handled as a compound drawable (a single TextView, using the `drawableTop`, `drawableLeft`, `drawableRight` and/or `drawableBottom` attributes to draw one or more images adjacent to the text).&#xA;&#xA;If the two widgets are offset from each other with margins, this can be replaced with a `drawablePadding` attribute.&#xA;&#xA;There&apos;s a lint quickfix to perform this conversion in the Eclipse plugin."
        errorLine1="            &lt;LinearLayout"
        errorLine2="            ^">
        <location
            file="../WordPress/src/main/res/layout/stats_widget_layout.xml"
            line="201"
            column="13"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (811 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M26.3,26.4c0.4,0.3,0.8,0.6,1.3,0.8c0.5,0.2,1,0.3,1.5,0.3c0.5,0,1.1-0.1,1.5-0.3c0.4-0.2,0.6-0.5,0.6-0.9 c0-0.2-0.1-0.4-0.2-0.6c-0.1-0.2-0.3-0.4-0.6-0.5c-0.3-0.1-0.7-0.2-1.1-0.3c-0.5-0.1-1.1-0.1-1.7-0.1V23c0.8,0.1,1.6-0.1,2.4-0.4 c0.4-0.2,0.7-0.6,0.7-1c0-0.3-0.1-0.7-0.4-0.9c-0.4-0.2-0.8-0.3-1.2-0.3c-0.4,0-0.9,0.1-1.2,0.3c-0.4,0.2-0.8,0.4-1.2,0.7l-1.3-1.5 c0.5-0.4,1.1-0.7,1.8-1c0.7-0.2,1.4-0.4,2.1-0.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.6c0.4,0.2,0.6,0.5,0.9,0.9 c0.2,0.4,0.3,0.8,0.3,1.2c0,0.5-0.2,1-0.6,1.4c-0.5,0.4-1,0.7-1.6,0.9v0.1c0.7,0.2,1.3,0.5,1.8,0.9c0.5,0.4,0.7,1,0.7,1.7 c0,0.5-0.1,0.9-0.4,1.3c-0.3,0.4-0.6,0.7-1,1c-0.4,0.3-0.9,0.5-1.4,0.6c-0.6,0.1-1.1,0.2-1.7,0.2c-0.9,0-1.7-0.1-2.5-0.4 c-0.6-0.2-1.2-0.6-1.7-1.1L26.3,26.4z M20.7,22.9h-4.4v-4.4h-2.2v10.9h2.2v-4.4h4.4v4.4h2.2V18.5h-2.2V22.9z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_heading_3.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (811 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M26.3,26.4c0.4,0.3,0.8,0.6,1.3,0.8c0.5,0.2,1,0.3,1.5,0.3c0.5,0,1.1-0.1,1.5-0.3c0.4-0.2,0.6-0.5,0.6-0.9 c0-0.2-0.1-0.4-0.2-0.6c-0.1-0.2-0.3-0.4-0.6-0.5c-0.3-0.1-0.7-0.2-1.1-0.3c-0.5-0.1-1.1-0.1-1.7-0.1V23c0.8,0.1,1.6-0.1,2.4-0.4 c0.4-0.2,0.7-0.6,0.7-1c0-0.3-0.1-0.7-0.4-0.9c-0.4-0.2-0.8-0.3-1.2-0.3c-0.4,0-0.9,0.1-1.2,0.3c-0.4,0.2-0.8,0.4-1.2,0.7l-1.3-1.5 c0.5-0.4,1.1-0.7,1.8-1c0.7-0.2,1.4-0.4,2.1-0.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.6c0.4,0.2,0.6,0.5,0.9,0.9 c0.2,0.4,0.3,0.8,0.3,1.2c0,0.5-0.2,1-0.6,1.4c-0.5,0.4-1,0.7-1.6,0.9v0.1c0.7,0.2,1.3,0.5,1.8,0.9c0.5,0.4,0.7,1,0.7,1.7 c0,0.5-0.1,0.9-0.4,1.3c-0.3,0.4-0.6,0.7-1,1c-0.4,0.3-0.9,0.5-1.4,0.6c-0.6,0.1-1.1,0.2-1.7,0.2c-0.9,0-1.7-0.1-2.5-0.4 c-0.6-0.2-1.2-0.6-1.7-1.1L26.3,26.4z M20.7,22.9h-4.4v-4.4h-2.2v10.9h2.2v-4.4h4.4v4.4h2.2V18.5h-2.2V22.9z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_heading_3_disabled.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (811 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M26.3,26.4c0.4,0.3,0.8,0.6,1.3,0.8c0.5,0.2,1,0.3,1.5,0.3c0.5,0,1.1-0.1,1.5-0.3c0.4-0.2,0.6-0.5,0.6-0.9 c0-0.2-0.1-0.4-0.2-0.6c-0.1-0.2-0.3-0.4-0.6-0.5c-0.3-0.1-0.7-0.2-1.1-0.3c-0.5-0.1-1.1-0.1-1.7-0.1V23c0.8,0.1,1.6-0.1,2.4-0.4 c0.4-0.2,0.7-0.6,0.7-1c0-0.3-0.1-0.7-0.4-0.9c-0.4-0.2-0.8-0.3-1.2-0.3c-0.4,0-0.9,0.1-1.2,0.3c-0.4,0.2-0.8,0.4-1.2,0.7l-1.3-1.5 c0.5-0.4,1.1-0.7,1.8-1c0.7-0.2,1.4-0.4,2.1-0.4c0.6,0,1.1,0.1,1.7,0.2c0.5,0.1,0.9,0.3,1.3,0.6c0.4,0.2,0.6,0.5,0.9,0.9 c0.2,0.4,0.3,0.8,0.3,1.2c0,0.5-0.2,1-0.6,1.4c-0.5,0.4-1,0.7-1.6,0.9v0.1c0.7,0.2,1.3,0.5,1.8,0.9c0.5,0.4,0.7,1,0.7,1.7 c0,0.5-0.1,0.9-0.4,1.3c-0.3,0.4-0.6,0.7-1,1c-0.4,0.3-0.9,0.5-1.4,0.6c-0.6,0.1-1.1,0.2-1.7,0.2c-0.9,0-1.7-0.1-2.5-0.4 c-0.6-0.2-1.2-0.6-1.7-1.1L26.3,26.4z M20.7,22.9h-4.4v-4.4h-2.2v10.9h2.2v-4.4h4.4v4.4h2.2V18.5h-2.2V22.9z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_heading_3_highlighted.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (960 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M22.9,29.5h-2.2v-4.4h-4.4v4.4h-2.2V18.5h2.2v4.4h4.4v-4.4h2.2V29.5z M32.3,21.3c-0.3-0.2-0.6-0.4-0.9-0.5 c-0.7-0.3-1.4-0.3-2.1,0c-0.3,0.1-0.6,0.3-0.9,0.6c-0.3,0.3-0.5,0.6-0.6,1c-0.2,0.5-0.3,1-0.3,1.6c0.4-0.4,0.9-0.6,1.4-0.8 c0.4-0.2,0.9-0.3,1.4-0.3c0.5,0,0.9,0.1,1.3,0.2c0.4,0.1,0.8,0.3,1.1,0.6c0.3,0.3,0.6,0.6,0.7,1c0.2,0.4,0.3,0.9,0.3,1.4 c0,0.5-0.1,1-0.3,1.5c-0.2,0.4-0.5,0.8-0.9,1.1c-0.4,0.3-0.8,0.5-1.3,0.7c-1.1,0.3-2.2,0.3-3.3-0.1c-0.6-0.2-1.1-0.5-1.5-0.9 c-0.5-0.5-0.8-1-1.1-1.6c-0.3-0.8-0.4-1.6-0.3-2.4c0-0.9,0.1-1.7,0.4-2.6c0.2-0.7,0.6-1.3,1.1-1.8c0.4-0.5,1-0.8,1.6-1 c0.6-0.2,1.2-0.3,1.9-0.3c0.7,0,1.5,0.1,2.2,0.4c0.5,0.2,1.1,0.5,1.5,0.9L32.3,21.3z M29.7,27.6c0.2,0,0.4,0,0.7-0.1 c0.2-0.1,0.4-0.1,0.6-0.3c0.2-0.1,0.3-0.3,0.4-0.5c0.1-0.2,0.1-0.5,0.1-0.8c0-0.4-0.1-0.9-0.5-1.2c-0.4-0.3-0.8-0.4-1.2-0.4 c-0.4,0-0.7,0.1-1.1,0.2c-0.4,0.2-0.8,0.5-1.1,0.8c0.1,0.4,0.2,0.7,0.3,1.1c0.1,0.3,0.3,0.5,0.5,0.7c0.2,0.2,0.4,0.3,0.6,0.4 C29.2,27.7,29.4,27.7,29.7,27.6z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_heading_6.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (960 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M22.9,29.5h-2.2v-4.4h-4.4v4.4h-2.2V18.5h2.2v4.4h4.4v-4.4h2.2V29.5z M32.3,21.3c-0.3-0.2-0.6-0.4-0.9-0.5 c-0.7-0.3-1.4-0.3-2.1,0c-0.3,0.1-0.6,0.3-0.9,0.6c-0.3,0.3-0.5,0.6-0.6,1c-0.2,0.5-0.3,1-0.3,1.6c0.4-0.4,0.9-0.6,1.4-0.8 c0.4-0.2,0.9-0.3,1.4-0.3c0.5,0,0.9,0.1,1.3,0.2c0.4,0.1,0.8,0.3,1.1,0.6c0.3,0.3,0.6,0.6,0.7,1c0.2,0.4,0.3,0.9,0.3,1.4 c0,0.5-0.1,1-0.3,1.5c-0.2,0.4-0.5,0.8-0.9,1.1c-0.4,0.3-0.8,0.5-1.3,0.7c-1.1,0.3-2.2,0.3-3.3-0.1c-0.6-0.2-1.1-0.5-1.5-0.9 c-0.5-0.5-0.8-1-1.1-1.6c-0.3-0.8-0.4-1.6-0.3-2.4c0-0.9,0.1-1.7,0.4-2.6c0.2-0.7,0.6-1.3,1.1-1.8c0.4-0.5,1-0.8,1.6-1 c0.6-0.2,1.2-0.3,1.9-0.3c0.7,0,1.5,0.1,2.2,0.4c0.5,0.2,1.1,0.5,1.5,0.9L32.3,21.3z M29.7,27.6c0.2,0,0.4,0,0.7-0.1 c0.2-0.1,0.4-0.1,0.6-0.3c0.2-0.1,0.3-0.3,0.4-0.5c0.1-0.2,0.1-0.5,0.1-0.8c0-0.4-0.1-0.9-0.5-1.2c-0.4-0.3-0.8-0.4-1.2-0.4 c-0.4,0-0.7,0.1-1.1,0.2c-0.4,0.2-0.8,0.5-1.1,0.8c0.1,0.4,0.2,0.7,0.3,1.1c0.1,0.3,0.3,0.5,0.5,0.7c0.2,0.2,0.4,0.3,0.6,0.4 C29.2,27.7,29.4,27.7,29.7,27.6z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_heading_6_disabled.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (960 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M22.9,29.5h-2.2v-4.4h-4.4v4.4h-2.2V18.5h2.2v4.4h4.4v-4.4h2.2V29.5z M32.3,21.3c-0.3-0.2-0.6-0.4-0.9-0.5 c-0.7-0.3-1.4-0.3-2.1,0c-0.3,0.1-0.6,0.3-0.9,0.6c-0.3,0.3-0.5,0.6-0.6,1c-0.2,0.5-0.3,1-0.3,1.6c0.4-0.4,0.9-0.6,1.4-0.8 c0.4-0.2,0.9-0.3,1.4-0.3c0.5,0,0.9,0.1,1.3,0.2c0.4,0.1,0.8,0.3,1.1,0.6c0.3,0.3,0.6,0.6,0.7,1c0.2,0.4,0.3,0.9,0.3,1.4 c0,0.5-0.1,1-0.3,1.5c-0.2,0.4-0.5,0.8-0.9,1.1c-0.4,0.3-0.8,0.5-1.3,0.7c-1.1,0.3-2.2,0.3-3.3-0.1c-0.6-0.2-1.1-0.5-1.5-0.9 c-0.5-0.5-0.8-1-1.1-1.6c-0.3-0.8-0.4-1.6-0.3-2.4c0-0.9,0.1-1.7,0.4-2.6c0.2-0.7,0.6-1.3,1.1-1.8c0.4-0.5,1-0.8,1.6-1 c0.6-0.2,1.2-0.3,1.9-0.3c0.7,0,1.5,0.1,2.2,0.4c0.5,0.2,1.1,0.5,1.5,0.9L32.3,21.3z M29.7,27.6c0.2,0,0.4,0,0.7-0.1 c0.2-0.1,0.4-0.1,0.6-0.3c0.2-0.1,0.3-0.3,0.4-0.5c0.1-0.2,0.1-0.5,0.1-0.8c0-0.4-0.1-0.9-0.5-1.2c-0.4-0.3-0.8-0.4-1.2-0.4 c-0.4,0-0.7,0.1-1.1,0.2c-0.4,0.2-0.8,0.5-1.1,0.8c0.1,0.4,0.2,0.7,0.3,1.1c0.1,0.3,0.3,0.5,0.5,0.7c0.2,0.2,0.4,0.3,0.6,0.4 C29.2,27.7,29.4,27.7,29.7,27.6z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_heading_6_highlighted.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1201 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M19.6,31.6h14.2v-2.2H19.6V31.6z M19.6,25.1h14.2v-2.2H19.6V25.1z M19.6,16.4v2.2h14.2v-2.2H19.6z M14.8,16.6 c0.1-0.1,0.2-0.2,0.3-0.3c0,0.2,0,0.5,0,0.8v2.5h1.3V15h-1.1l-1.6,1.3l0.7,0.8L14.8,16.6z M15.2,25.1c0.5-0.5,0.9-0.8,1-0.9 c0.2-0.2,0.3-0.3,0.4-0.5c0.1-0.2,0.2-0.3,0.2-0.5c0-0.2,0.1-0.3,0.1-0.5c0-0.2-0.1-0.5-0.2-0.7s-0.3-0.3-0.6-0.5 c-0.2-0.1-0.5-0.2-0.8-0.2c-0.2,0-0.5,0-0.7,0.1c-0.2,0-0.4,0.1-0.5,0.2c-0.2,0.1-0.4,0.2-0.6,0.5l0.7,0.8c0.2-0.2,0.4-0.3,0.5-0.4 c0.2-0.1,0.3-0.1,0.4-0.1c0.1,0,0.3,0,0.3,0.1c0.1,0.1,0.1,0.2,0.1,0.3c0,0.1,0,0.2-0.1,0.3s-0.1,0.2-0.2,0.3 c-0.1,0.1-0.3,0.4-0.6,0.7l-1.1,1.2v0.8h3.4v-1L15.2,25.1L15.2,25.1L15.2,25.1z M15.8,30.3L15.8,30.3c0.3-0.1,0.6-0.3,0.8-0.5 c0.2-0.2,0.3-0.5,0.3-0.7c0-0.3-0.1-0.6-0.4-0.8c-0.3-0.2-0.7-0.3-1.1-0.3c-0.3,0-0.6,0-0.9,0.1c-0.3,0.1-0.5,0.2-0.8,0.4l0.5,0.8 c0.3-0.2,0.6-0.3,0.9-0.3c0.2,0,0.3,0,0.4,0.1c0.1,0.1,0.1,0.2,0.1,0.3c0,0.3-0.3,0.5-1,0.5h-0.3v0.9h0.3c0.2,0,0.4,0,0.6,0.1 c0.1,0,0.3,0.1,0.3,0.2c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.6,0.1c-0.2,0-0.4,0-0.6-0.1 c-0.2,0-0.4-0.1-0.6-0.2v1c0.2,0.1,0.5,0.2,0.7,0.2c0.2,0,0.4,0.1,0.7,0.1c0.6,0,1.1-0.1,1.4-0.4c0.3-0.2,0.5-0.6,0.5-1 C16.9,30.8,16.5,30.4,15.8,30.3z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_ol.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1201 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M19.6,31.6h14.2v-2.2H19.6V31.6z M19.6,25.1h14.2v-2.2H19.6V25.1z M19.6,16.4v2.2h14.2v-2.2H19.6z M14.8,16.6 c0.1-0.1,0.2-0.2,0.3-0.3c0,0.2,0,0.5,0,0.8v2.5h1.3V15h-1.1l-1.6,1.3l0.7,0.8L14.8,16.6z M15.2,25.1c0.5-0.5,0.9-0.8,1-0.9 c0.2-0.2,0.3-0.3,0.4-0.5c0.1-0.2,0.2-0.3,0.2-0.5c0-0.2,0.1-0.3,0.1-0.5c0-0.2-0.1-0.5-0.2-0.7s-0.3-0.3-0.6-0.5 c-0.2-0.1-0.5-0.2-0.8-0.2c-0.2,0-0.5,0-0.7,0.1c-0.2,0-0.4,0.1-0.5,0.2c-0.2,0.1-0.4,0.2-0.6,0.5l0.7,0.8c0.2-0.2,0.4-0.3,0.5-0.4 c0.2-0.1,0.3-0.1,0.4-0.1c0.1,0,0.3,0,0.3,0.1c0.1,0.1,0.1,0.2,0.1,0.3c0,0.1,0,0.2-0.1,0.3s-0.1,0.2-0.2,0.3 c-0.1,0.1-0.3,0.4-0.6,0.7l-1.1,1.2v0.8h3.4v-1L15.2,25.1L15.2,25.1L15.2,25.1z M15.8,30.3L15.8,30.3c0.3-0.1,0.6-0.3,0.8-0.5 c0.2-0.2,0.3-0.5,0.3-0.7c0-0.3-0.1-0.6-0.4-0.8c-0.3-0.2-0.7-0.3-1.1-0.3c-0.3,0-0.6,0-0.9,0.1c-0.3,0.1-0.5,0.2-0.8,0.4l0.5,0.8 c0.3-0.2,0.6-0.3,0.9-0.3c0.2,0,0.3,0,0.4,0.1c0.1,0.1,0.1,0.2,0.1,0.3c0,0.3-0.3,0.5-1,0.5h-0.3v0.9h0.3c0.2,0,0.4,0,0.6,0.1 c0.1,0,0.3,0.1,0.3,0.2c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.6,0.1c-0.2,0-0.4,0-0.6-0.1 c-0.2,0-0.4-0.1-0.6-0.2v1c0.2,0.1,0.5,0.2,0.7,0.2c0.2,0,0.4,0.1,0.7,0.1c0.6,0,1.1-0.1,1.4-0.4c0.3-0.2,0.5-0.6,0.5-1 C16.9,30.8,16.5,30.4,15.8,30.3z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_ol_disabled.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1201 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M19.6,31.6h14.2v-2.2H19.6V31.6z M19.6,25.1h14.2v-2.2H19.6V25.1z M19.6,16.4v2.2h14.2v-2.2H19.6z M14.8,16.6 c0.1-0.1,0.2-0.2,0.3-0.3c0,0.2,0,0.5,0,0.8v2.5h1.3V15h-1.1l-1.6,1.3l0.7,0.8L14.8,16.6z M15.2,25.1c0.5-0.5,0.9-0.8,1-0.9 c0.2-0.2,0.3-0.3,0.4-0.5c0.1-0.2,0.2-0.3,0.2-0.5c0-0.2,0.1-0.3,0.1-0.5c0-0.2-0.1-0.5-0.2-0.7s-0.3-0.3-0.6-0.5 c-0.2-0.1-0.5-0.2-0.8-0.2c-0.2,0-0.5,0-0.7,0.1c-0.2,0-0.4,0.1-0.5,0.2c-0.2,0.1-0.4,0.2-0.6,0.5l0.7,0.8c0.2-0.2,0.4-0.3,0.5-0.4 c0.2-0.1,0.3-0.1,0.4-0.1c0.1,0,0.3,0,0.3,0.1c0.1,0.1,0.1,0.2,0.1,0.3c0,0.1,0,0.2-0.1,0.3s-0.1,0.2-0.2,0.3 c-0.1,0.1-0.3,0.4-0.6,0.7l-1.1,1.2v0.8h3.4v-1L15.2,25.1L15.2,25.1L15.2,25.1z M15.8,30.3L15.8,30.3c0.3-0.1,0.6-0.3,0.8-0.5 c0.2-0.2,0.3-0.5,0.3-0.7c0-0.3-0.1-0.6-0.4-0.8c-0.3-0.2-0.7-0.3-1.1-0.3c-0.3,0-0.6,0-0.9,0.1c-0.3,0.1-0.5,0.2-0.8,0.4l0.5,0.8 c0.3-0.2,0.6-0.3,0.9-0.3c0.2,0,0.3,0,0.4,0.1c0.1,0.1,0.1,0.2,0.1,0.3c0,0.3-0.3,0.5-1,0.5h-0.3v0.9h0.3c0.2,0,0.4,0,0.6,0.1 c0.1,0,0.3,0.1,0.3,0.2c0.1,0.1,0.1,0.2,0.1,0.3c0,0.2-0.1,0.3-0.2,0.4c-0.1,0.1-0.3,0.1-0.6,0.1c-0.2,0-0.4,0-0.6-0.1 c-0.2,0-0.4-0.1-0.6-0.2v1c0.2,0.1,0.5,0.2,0.7,0.2c0.2,0,0.4,0.1,0.7,0.1c0.6,0,1.1-0.1,1.4-0.4c0.3-0.2,0.5-0.6,0.5-1 C16.9,30.8,16.5,30.4,15.8,30.3z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable/format_bar_button_ol_highlighted.xml"
            line="13"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1068 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm6.918 6h-3.215c-0.188-1.424-0.42-2.65-0.565-3.357 1.593 0.682 2.916 1.87 3.78 3.357zm-5.904-3.928c0.068 0.352 0.387 2.038 0.645 3.928h-3.32c0.26-1.89 0.578-3.576 0.646-3.928C11.32 4.03 11.656 4 12 4s0.68 0.03 1.014 0.072zM14 12c0 0.598-0.043 1.286-0.11 2h-3.78c-0.067-0.714-0.11-1.402-0.11-2s0.043-1.286 0.11-2h3.78c0.067 0.714 0.11 1.402 0.11 2zM8.862 4.643C8.717 5.35 8.485 6.576 8.297 8H5.082c0.864-1.487 2.187-2.675 3.78-3.357zM4.262 10h3.822c-0.05 0.668-0.084 1.344-0.084 2s0.033 1.332 0.085 2H4.263C4.097 13.36 4 12.692 4 12s0.098-1.36 0.263-2zm0.82 6h3.215c0.188 1.424 0.42 2.65 0.565 3.357-1.593-0.682-2.916-1.87-3.78-3.357zm5.904 3.928c-0.068-0.353-0.388-2.038-0.645-3.928h3.32c-0.26 1.89-0.578 3.576-0.646 3.928-0.333 0.043-0.67 0.072-1.014 0.072s-0.68-0.03-1.014-0.072zm4.152-0.57c0.145-0.708 0.377-1.934 0.565-3.358h3.215c-0.864 1.487-2.187 2.675-3.78 3.357zm4.6-5.358h-3.822c0.05-0.668 0.084-1.344 0.084-2s-0.033-1.332-0.085-2h3.82c0.167 0.64 0.265 1.308 0.265 2s-0.097 1.36-0.263 2z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/drawable/ic_domains_grey_24dp.xml"
            line="10"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1068 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm6.918 6h-3.215c-0.188-1.424-0.42-2.65-0.565-3.357 1.593 0.682 2.916 1.87 3.78 3.357zm-5.904-3.928c0.068 0.352 0.387 2.038 0.645 3.928h-3.32c0.26-1.89 0.578-3.576 0.646-3.928C11.32 4.03 11.656 4 12 4s0.68 0.03 1.014 0.072zM14 12c0 0.598-0.043 1.286-0.11 2h-3.78c-0.067-0.714-0.11-1.402-0.11-2s0.043-1.286 0.11-2h3.78c0.067 0.714 0.11 1.402 0.11 2zM8.862 4.643C8.717 5.35 8.485 6.576 8.297 8H5.082c0.864-1.487 2.187-2.675 3.78-3.357zM4.262 10h3.822c-0.05 0.668-0.084 1.344-0.084 2s0.033 1.332 0.085 2H4.263C4.097 13.36 4 12.692 4 12s0.098-1.36 0.263-2zm0.82 6h3.215c0.188 1.424 0.42 2.65 0.565 3.357-1.593-0.682-2.916-1.87-3.78-3.357zm5.904 3.928c-0.068-0.353-0.388-2.038-0.645-3.928h3.32c-0.26 1.89-0.578 3.576-0.646 3.928-0.333 0.043-0.67 0.072-1.014 0.072s-0.68-0.03-1.014-0.072zm4.152-0.57c0.145-0.708 0.377-1.934 0.565-3.358h3.215c-0.864 1.487-2.187 2.675-3.78 3.357zm4.6-5.358h-3.822c0.05-0.668 0.084-1.344 0.084-2s-0.033-1.332-0.085-2h3.82c0.167 0.64 0.265 1.308 0.265 2s-0.097 1.36-0.263 2z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/ic_domains_white_24dp.xml"
            line="12"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1040 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zM3.5 12c0-1.232 0.264-2.402 0.736-3.46L8.29 19.65C5.456 18.272 3.5 15.365 3.5 12zm8.5 8.5c-0.834 0-1.64-0.12-2.4-0.345l2.55-7.41 2.613 7.157c0.017 0.042 0.038 0.08 0.06 0.117-0.884 0.31-1.833 0.48-2.823 0.48zm1.172-12.485c0.512-0.027 0.973-0.08 0.973-0.08 0.458-0.055 0.404-0.728-0.054-0.702 0 0-1.376 0.108-2.265 0.108-0.835 0-2.24-0.107-2.24-0.107-0.458-0.026-0.51 0.674-0.053 0.7 0 0 0.434 0.055 0.892 0.082l1.324 3.63-1.86 5.578-3.096-9.208c0.512-0.027 0.973-0.08 0.973-0.08 0.458-0.055 0.403-0.728-0.055-0.702 0 0-1.376 0.108-2.265 0.108-0.16 0-0.347-0.003-0.547-0.01C6.418 5.025 9.03 3.5 12 3.5c2.213 0 4.228 0.846 5.74 2.232-0.037-0.002-0.072-0.007-0.11-0.007-0.835 0-1.427 0.727-1.427 1.51 0 0.7 0.404 1.292 0.835 1.993 0.323 0.566 0.7 1.293 0.7 2.344 0 0.727-0.28 1.572-0.646 2.748l-0.848 2.833-3.072-9.138zm3.1 11.332l2.597-7.506c0.484-1.212 0.645-2.18 0.645-3.044 0-0.313-0.02-0.603-0.057-0.874 0.664 1.21 1.042 2.6 1.042 4.078 0 3.136-1.7 5.874-4.227 7.347z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/ic_wordpress_grey_20dp.xml"
            line="10"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1087 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="    &lt;path android:fillColor=&quot;#004F81&quot; android:pathData=&quot;M82.1,113.1c0.7,-0.4 1.5,-0.8 2.3,-1c0.8,-0.3 1.6,-0.4 2.4,-0.5c0.8,-0.1 1.7,0 2.5,0.1c0.8,0.1 1.6,0.3 2.5,0.6c0.4,0.1 0.6,0.4 0.6,0.8l0,0.1c0.1,1 0.5,2.2 1,3.1c0.5,1 1.2,1.8 2,2.3c1,0.6 2,1.2 3.1,1.6c1.1,0.4 2.2,0.8 3.3,1c0.4,0.1 0.8,0.4 0.9,0.8l0,0c1.7,6.7 4.3,13.4 8,19.3c1.9,2.9 4,5.7 6.6,7.8c2.6,2.2 5.7,3.7 9,4.1c1.7,0.2 3.3,0.1 4.9,-0.2c1.6,-0.4 3.1,-1.1 4.4,-2.1c2.6,-2 4.3,-5.1 5.3,-8.4c1.1,-3.3 1.7,-6.7 2,-10.2c0.2,-1.7 0.3,-3.5 0.4,-5.3c0.1,-1.8 0.1,-3.5 0,-5.3l0,0c0,-0.2 0.1,-0.3 0.3,-0.3c0.2,0 0.3,0.1 0.3,0.3c0.6,3.6 0.7,7.1 0.6,10.7c-0.2,3.6 -0.7,7.2 -1.8,10.7c-1.1,3.5 -2.9,6.9 -6,9.4c-1.5,1.2 -3.3,2 -5.2,2.5c-1.9,0.4 -3.8,0.5 -5.7,0.3c-3.8,-0.4 -7.3,-2.2 -10.2,-4.5c-2.9,-2.4 -5.2,-5.3 -7.1,-8.3c-1.9,-3.1 -3.5,-6.3 -4.9,-9.7c-1.3,-3.4 -2.5,-6.7 -3.3,-10.3l0.9,0.8c-1.4,-0.3 -2.5,-0.7 -3.7,-1.2c-1.2,-0.5 -2.3,-1.1 -3.4,-1.8c-1.2,-0.8 -2.1,-1.9 -2.7,-3.1c-0.6,-1.2 -1,-2.5 -1.2,-3.9l0.6,0.9c-0.6,-0.2 -1.3,-0.4 -2,-0.5c-0.7,-0.1 -1.4,-0.1 -2.1,-0.1c-0.7,0 -1.4,0.1 -2.1,0.2c-0.7,0.1 -1.4,0.3 -2.1,0.6l0,0c-0.4,0.1 -0.7,-0.1 -0.8,-0.4C81.7,113.6 81.8,113.2 82.1,113.1z&quot;/>"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/drawable/img_email_alert_120dp.xml"
            line="29"
            column="57"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1098 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M103.4,15.5c-1.2,-0.1 -2.5,-0.1 -3.7,-0.1V7.2c0,-0.7 -0.1,-1.5 -0.3,-2.1c-0.2,-0.7 -0.6,-1.4 -1,-2c-1,-1.2 -2.2,-2 -3.7,-2.3c-0.7,-0.1 -1.5,-0.1 -2.1,-0.1H83L52.1,0.7L21.3,0.8h-9.6c-0.6,0 -1.3,0 -2.1,0.1C8.2,1.3 7,2.1 6.1,3.3c-0.4,0.6 -0.7,1.2 -1,1.9C4.9,5.9 4.8,6.6 4.8,7.3v3.9l0,4.2c-1.3,0 -2.7,0.1 -4,0.1c-0.1,0 -0.3,0.1 -0.3,0.3s0.1,0.3 0.3,0.3c1.3,0 2.7,0.1 4,0.1l0,2.7C5,39.3 5.2,59.8 5.5,80.2c0,0.1 0.1,0.1 0.2,0.1c0.1,0 0.1,-0.1 0.1,-0.1c0.2,-20.4 0.4,-40.9 0.4,-61.4v-2.5c6.8,0.2 13.5,0.2 20.3,0.3l25.6,0.1H65l12.8,-0.1c6.8,-0.1 13.5,-0.1 20.3,-0.4v2.7l0.1,60.6l-42.3,0.1l-21.5,0.1L13,79.9c-0.1,0 -0.3,0.1 -0.3,0.3c0,0.1 0.1,0.3 0.3,0.3l21.5,0.1l21.5,0.1l43,0.1c0.4,0 0.7,-0.4 0.7,-0.7l0.1,-61.4v-2.6c1.2,0 2.5,-0.1 3.7,-0.2c0.1,0 0.1,-0.1 0.1,-0.3C103.6,15.6 103.5,15.5 103.4,15.5zM77.8,15L65,14.9H52.1L26.5,15c-6.8,0.1 -13.5,0.1 -20.3,0.3V7.2c0,-0.6 0.1,-1.1 0.2,-1.7c0.2,-0.5 0.4,-1 0.8,-1.5C8,3.2 8.9,2.6 10,2.3c0.6,-0.1 1.1,-0.1 1.8,-0.1h9.6l30.8,0.1l30.8,0.1h9.6c0.7,0 1.2,0 1.8,0.1c1.1,0.2 2.1,0.9 2.7,1.8c0.3,0.4 0.6,0.9 0.7,1.5c0.1,0.6 0.2,1.1 0.2,1.7v8C91.3,15.1 84.6,15 77.8,15z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_illustration_pages_104dp.xml"
            line="10"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1870 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M35.1,55.5c0,0.1 -0.2,0.4 -0.4,0.4c-0.2,0 -0.4,-0.1 -0.4,-0.4v-3.6c0,-0.2 0.1,-0.4 0.4,-0.4s0.4,0.1 0.4,0.4V55.5zM34.1,26.6h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4C34.4,26.7 34.3,26.6 34.1,26.6zM35.1,30c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v3.6c0,0.2 0.1,0.4 0.4,0.4c0.1,0 0.4,-0.2 0.4,-0.4V30zM35.1,44.6c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v3.6c0,0.2 0.1,0.4 0.4,0.4c0.1,0 0.4,-0.2 0.4,-0.4V44.6zM35.1,37.3c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v3.6c0,0.2 0.1,0.4 0.4,0.4c0.1,0 0.4,-0.2 0.4,-0.4V37.3zM17.6,29.1c0.2,0 0.4,-0.1 0.4,-0.4v-1.5h1.5c0.2,0 0.4,-0.1 0.4,-0.4c0,-0.2 -0.1,-0.4 -0.4,-0.4h-1.8c-0.2,0 -0.4,0.1 -0.4,0.4v1.8C17.2,29 17.4,29.1 17.6,29.1zM17.2,36c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.1 0.4,-0.4v-3.6c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4V36zM17.2,43.3c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.1 0.4,-0.4v-3.6c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4V43.3zM17.2,50.6c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.1 0.4,-0.4V47c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4V50.6zM35.1,59.2c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v3.6c0,0.2 0.1,0.4 0.4,0.4c0.1,0 0.4,-0.2 0.4,-0.4V59.2zM23.4,70.1c0,0.2 0.1,0.4 0.4,0.4h3.7c0.1,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7C23.5,69.8 23.4,69.9 23.4,70.1zM17.2,57.9c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.1 0.4,-0.4v-3.6c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4V57.9zM34.3,66.5v3.3h-3.3c-0.2,0 -0.4,0.1 -0.4,0.4s0.1,0.4 0.4,0.4h3.7c0.1,0 0.4,-0.2 0.4,-0.4v-3.6c0,-0.2 -0.1,-0.4 -0.4,-0.4S34.3,66.3 34.3,66.5zM26.7,26.6h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4C27.1,26.7 27,26.6 26.7,26.6zM17.2,70.1c0,0.2 0.1,0.4 0.4,0.4h2.5c0.1,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-2.1V69c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4V70.1zM17.2,65.2c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.1 0.4,-0.4v-3.6c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4V65.2z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_illustration_pages_104dp.xml"
            line="15"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1552 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M44.2,32.5v-3.6c0,-0.2 0.1,-0.4 0.4,-0.4c0.2,0 0.4,0.1 0.4,0.4v3.6c0,0.2 -0.1,0.4 -0.4,0.4C44.4,32.9 44.2,32.8 44.2,32.5zM75.5,35h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4S75.3,35 75.5,35zM75.6,27.3h3.7c0.2,0 0.4,-0.1 0.4,-0.4c0,-0.2 -0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4C75.2,27.1 75.4,27.3 75.6,27.3zM46.2,35h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4S46,35 46.2,35zM46.3,27.3h3.7c0.2,0 0.4,-0.1 0.4,-0.4c0,-0.2 -0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4C45.9,27.1 46.1,27.3 46.3,27.3zM82.8,35h3.7c0.2,0 0.4,-0.2 0.4,-0.4v-3.9c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v3.6h-3.3c-0.2,0 -0.4,0.1 -0.4,0.4S82.6,35 82.8,35zM82.9,27.3h3.4c0.1,0.1 0.1,0.1 0.2,0.1c0.2,0 0.4,-0.1 0.4,-0.4v-0.1c0,-0.2 -0.1,-0.4 -0.4,-0.4h-3.6c-0.2,0 -0.4,0.1 -0.4,0.4C82.5,27.1 82.7,27.3 82.9,27.3zM68.2,35h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4S68,35 68.2,35zM60.9,35h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4S60.6,35 60.9,35zM60.9,27.3h3.7c0.2,0 0.4,-0.1 0.4,-0.4c0,-0.2 -0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4C60.6,27.1 60.7,27.3 60.9,27.3zM68.3,27.3h3.7c0.2,0 0.4,-0.1 0.4,-0.4c0,-0.2 -0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4C67.9,27.1 68,27.3 68.3,27.3zM53.6,27.3h3.7c0.2,0 0.4,-0.1 0.4,-0.4c0,-0.2 -0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4C53.2,27.1 53.4,27.3 53.6,27.3zM53.5,35h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7c-0.2,0 -0.4,0.1 -0.4,0.4S53.3,35 53.5,35z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_illustration_pages_104dp.xml"
            line="20"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (3366 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M44.2,45.5c0,-0.2 0.1,-0.4 0.4,-0.4h2.9c0.2,0 0.4,0.1 0.4,0.4s-0.1,0.4 -0.4,0.4H45v0.4c0,0.2 -0.1,0.4 -0.4,0.4c-0.2,0 -0.4,-0.1 -0.4,-0.4V45.5zM72.8,45.5c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7C72.9,45.1 72.8,45.2 72.8,45.5zM69.8,62.8h-0.3c-0.2,0 -0.4,0.1 -0.4,0.4c0,0.2 0.1,0.4 0.4,0.4h0.2c1.1,0 2.3,-0.3 3.4,-0.9c0.2,-0.1 0.2,-0.4 0.1,-0.5c-0.1,-0.2 -0.4,-0.2 -0.5,-0.1C71.8,62.5 70.8,62.8 69.8,62.8zM75.9,60.3c0.1,0 0.1,-0.1 0.2,-0.1l0.4,-0.4c0.8,-0.7 1.5,-1.3 2.4,-2c0.1,-0.1 0.2,-0.4 0.1,-0.5c-0.1,-0.1 -0.4,-0.2 -0.5,-0.1l-2.4,2l-0.4,0.4c-0.2,0.1 -0.2,0.4 -0.1,0.5C75.7,60.3 75.8,60.3 75.9,60.3zM75.1,70.1c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7C75.3,69.8 75.1,69.9 75.1,70.1zM68.2,69.8c-0.2,0 -0.4,0.1 -0.4,0.4s0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4H68.2zM80.1,45.5c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7C80.3,45.1 80.1,45.2 80.1,45.5zM44.2,60.8c0,0.2 0.1,0.4 0.4,0.4c0.2,0 0.4,-0.1 0.4,-0.4v-3.6c0,-0.2 -0.1,-0.4 -0.4,-0.4c-0.2,0 -0.4,0.1 -0.4,0.4V60.8zM44.2,66.9c-0.2,0.3 -0.3,0.5 -0.4,0.8c-0.1,0.2 0,0.4 0.1,0.5c0,0.1 0.1,0.1 0.1,0.1c0,0 0.1,0 0.2,-0.1c0,0.2 0.1,0.3 0.3,0.3c0.2,0 0.4,-0.1 0.4,-0.4v-0.9c0.5,-0.8 0.9,-1.5 1.5,-2.1c0.1,-0.1 0.1,-0.4 -0.1,-0.5c-0.1,-0.1 -0.4,-0.1 -0.5,0.1c-0.3,0.4 -0.6,0.8 -0.9,1.2v-1.3c0,-0.2 -0.1,-0.4 -0.4,-0.4c-0.2,0 -0.4,0.1 -0.4,0.4V66.9zM44.2,53.5c0,0.2 0.1,0.4 0.4,0.4c0.2,0 0.4,-0.1 0.4,-0.4v-3.6c0,-0.2 -0.1,-0.4 -0.4,-0.4c-0.2,0 -0.4,0.1 -0.4,0.4V53.5zM86.9,61.4c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4V65c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.2 0.4,-0.4V61.4zM46.2,69.8c-0.2,0 -0.4,0.1 -0.4,0.4s0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4H46.2zM86.9,54.1c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v3.6c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.2 0.4,-0.4V54.1zM86.9,46.8c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v3.6c0,0.2 0.1,0.4 0.4,0.4s0.4,-0.2 0.4,-0.4V46.8zM82.8,70.5h3.7c0.2,0 0.4,-0.2 0.4,-0.4v-1.5c0,-0.2 -0.1,-0.4 -0.4,-0.4s-0.4,0.1 -0.4,0.4v1.1h-3.3c-0.2,0 -0.4,0.1 -0.4,0.4S82.6,70.5 82.8,70.5zM85.7,54.7c0,-0.1 -0.1,-0.3 -0.4,-0.3c-1.3,0.1 -2.5,0.4 -3.7,0.9c-0.2,0.1 -0.3,0.3 -0.2,0.5c0.1,0.1 0.2,0.2 0.4,0.2c0.1,0 0.1,0 0.1,-0.1c1.2,-0.4 2.3,-0.7 3.4,-0.9C85.5,55.1 85.7,54.9 85.7,54.7zM62.6,60.9c-0.2,-0.1 -0.4,0 -0.5,0.2s0,0.4 0.2,0.5l0.7,0.3c0.9,0.4 1.8,0.7 2.7,1h0.1c0.1,0 0.3,-0.1 0.3,-0.3c0.1,-0.1 0,-0.4 -0.2,-0.4c-0.9,-0.3 -1.8,-0.7 -2.6,-1L62.6,60.9zM60.9,69.8c-0.2,0 -0.4,0.1 -0.4,0.4s0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4H60.9zM65.5,45.5c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7C65.6,45.1 65.5,45.2 65.5,45.5zM50.8,45.5c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7C51,45.1 50.8,45.2 50.8,45.5zM58.2,45.5c0,0.2 0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4h-3.7C58.3,45.1 58.2,45.2 58.2,45.5zM48.4,62.5c0.1,0.1 0.2,0.1 0.3,0.1h0.2c1,-0.8 2.1,-1.4 3.1,-1.8c0.2,-0.1 0.3,-0.3 0.2,-0.5c-0.1,-0.2 -0.3,-0.3 -0.5,-0.2c-1.1,0.4 -2.2,1.1 -3.2,1.9C48.3,62.1 48.3,62.3 48.4,62.5zM55.1,59.6c0,0.2 0.1,0.4 0.4,0.4c1.2,0 2.3,0.1 3.6,0.4c0.1,0 0.3,-0.1 0.4,-0.2c0,-0.2 -0.1,-0.4 -0.3,-0.4c-1.2,-0.3 -2.4,-0.4 -3.7,-0.4C55.2,59.3 55.1,59.4 55.1,59.6zM53.5,69.8c-0.2,0 -0.4,0.1 -0.4,0.4s0.1,0.4 0.4,0.4h3.7c0.2,0 0.4,-0.1 0.4,-0.4s-0.1,-0.4 -0.4,-0.4H53.5z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_illustration_pages_104dp.xml"
            line="25"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (857 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M92.034,111.91c-0.233,-2.972 0.447,-5.875 1.378,-8.583 0.919,-2.73 2.146,-5.31 3.298,-7.863 0.57,-1.274 1.133,-2.556 1.533,-3.81 0.198,-0.615 0.35,-1.257 0.329,-1.737 -0.034,-0.485 -0.152,-0.571 -0.432,-0.66 -0.301,-0.073 -0.93,0.1 -1.47,0.36 -0.56,0.269 -1.117,0.616 -1.65,1.009 -1.07,0.787 -2.064,1.724 -2.988,2.724a33.808,33.808 0,0 0,-7.728 14.369c-1.372,5.325 -1.293,11.018 0.34,16.304a0.64,0.64 0,0 1,-1.22 0.386,31.193 31.193,0 0,1 -0.703,-17.078c1.362,-5.616 4.084,-10.888 7.965,-15.215 0.984,-1.072 2.044,-2.085 3.242,-2.975 0.6,-0.444 1.239,-0.853 1.95,-1.197 0.725,-0.311 1.489,-0.675 2.6,-0.516a2.384,2.384 0,0 1,1.46 0.88c0.369,0.487 0.494,1.05 0.516,1.507 0.038,0.935 -0.173,1.682 -0.383,2.409 -0.457,1.434 -1.064,2.726 -1.653,4.019 -1.192,2.57 -2.408,5.082 -3.401,7.662 -0.955,2.577 -1.757,5.244 -1.706,7.933v0.01a0.64,0.64 0,0 1,-1.277 0.062&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_promo_quick_start.xml"
            line="20"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1929 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M105.194,97.932c4.367,-0.527 8.734,-0.715 13.1,-0.808l6.55,-0.105 6.55,-0.019 13.101,0.155c4.367,0.103 8.734,0.218 13.1,0.577 0.244,0.019 0.425,0.216 0.403,0.436 -0.02,0.197 -0.193,0.347 -0.403,0.364 -4.366,0.358 -8.733,0.473 -13.1,0.577l-13.1,0.154 -6.551,-0.019 -6.55,-0.105c-4.366,-0.094 -8.733,-0.28 -13.1,-0.808 -0.123,-0.014 -0.209,-0.116 -0.192,-0.226 0.013,-0.092 0.094,-0.161 0.192,-0.173M105.174,77.932c3.85,-0.528 7.7,-0.715 11.55,-0.808l5.777,-0.105 5.775,-0.019 11.55,0.155c3.852,0.103 7.702,0.218 11.553,0.577a0.4,0.4 0,0 1,0 0.8c-3.851,0.358 -7.701,0.473 -11.552,0.577l-11.551,0.154 -5.775,-0.019 -5.776,-0.105c-3.85,-0.094 -7.7,-0.28 -11.551,-0.808a0.201,0.201 0,0 1,0 -0.399M105.125,83.938c1.068,-0.527 2.136,-0.713 3.204,-0.808a31.17,31.17 0,0 1,3.203 -0.126c1.068,0.023 2.135,0.079 3.203,0.153 1.068,0.087 2.136,0.227 3.204,0.582a0.421,0.421 0,0 1,0 0.8c-1.068,0.353 -2.136,0.494 -3.204,0.581 -1.068,0.074 -2.135,0.13 -3.203,0.152a30.889,30.889 0,0 1,-3.203 -0.125c-1.068,-0.095 -2.136,-0.281 -3.204,-0.809a0.222,0.222 0,0 1,0 -0.4M105.193,117.932c4.285,-0.528 8.568,-0.715 12.85,-0.808l6.426,-0.105 6.425,-0.019 12.85,0.155c4.284,0.103 8.567,0.218 12.851,0.577 0.245,0.02 0.426,0.216 0.403,0.437 -0.02,0.196 -0.194,0.345 -0.403,0.363 -4.284,0.358 -8.567,0.473 -12.851,0.577l-12.85,0.154 -6.425,-0.019 -6.425,-0.105c-4.283,-0.094 -8.566,-0.28 -12.85,-0.808 -0.123,-0.014 -0.209,-0.117 -0.192,-0.227 0.013,-0.092 0.095,-0.16 0.191,-0.172M105.398,123.938c3.403,-0.527 6.806,-0.713 10.209,-0.808 3.4,-0.09 6.803,-0.146 10.206,-0.126 3.403,0.023 6.803,0.079 10.206,0.153 3.403,0.087 6.807,0.227 10.21,0.582 0.704,0.073 1.086,0.311 0.854,0.532 -0.14,0.131 -0.469,0.227 -0.854,0.268 -3.403,0.353 -6.807,0.494 -10.21,0.581 -3.403,0.074 -6.803,0.13 -10.206,0.152 -3.403,0.02 -6.806,-0.034 -10.206,-0.125 -3.403,-0.095 -6.806,-0.281 -10.21,-0.809 -0.353,-0.054 -0.496,-0.188 -0.324,-0.298a0.918,0.918 0,0 1,0.325 -0.102&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_promo_quick_start.xml"
            line="50"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1396 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M93.31,111.838c0.128,1.723 0.326,3.438 0.666,5.106 0.35,1.648 0.83,3.32 1.703,4.589 0.43,0.633 0.973,1.103 1.579,1.279 0.303,0.09 0.628,0.112 0.969,0.073 0.17,-0.018 0.133,-0.024 0.198,-0.06a0.728,0.728 0,0 0,0.174 -0.225c0.266,-0.505 0.375,-1.376 0.42,-2.186 0.048,-0.831 0.043,-1.69 0.029,-2.555 -0.032,-1.732 -0.093,-3.492 -0.02,-5.29 0.04,-0.9 0.11,-1.811 0.29,-2.742 0.19,-0.922 0.447,-1.906 1.167,-2.817 0.367,-0.45 0.857,-0.84 1.483,-1.05 0.742,-0.247 1.489,-0.047 1.986,0.224 1.026,0.56 1.639,1.327 2.209,2.086 1.097,1.544 1.845,3.212 2.46,4.913 1.19,3.414 1.78,6.987 1.89,10.567 0.105,3.58 -0.285,7.185 -1.258,10.639a33.844,33.844 0,0 1,-4.447 9.738c-2,2.968 -4.456,5.606 -7.207,7.85a0.64,0.64 0,0 1,-0.825 -0.978c5.205,-4.491 9.074,-10.464 10.77,-17.07 1.707,-6.575 1.5,-13.713 -0.731,-20.104 -0.563,-1.583 -1.264,-3.135 -2.191,-4.447 -0.457,-0.64 -1.011,-1.246 -1.533,-1.52 -0.264,-0.143 -0.44,-0.147 -0.54,-0.112 -0.204,0.065 -0.44,0.225 -0.621,0.452 -0.385,0.46 -0.64,1.21 -0.792,1.988 -0.156,0.785 -0.23,1.62 -0.272,2.466 -0.082,1.695 -0.02,3.43 -0.027,5.193a37.55,37.55 0,0 1,-0.077 2.686c-0.094,0.917 -0.136,1.842 -0.681,2.9a2.352,2.352 0,0 1,-0.667 0.764c-0.288,0.226 -0.76,0.353 -1.023,0.359a4.065,4.065 0,0 1,-1.623 -0.163c-1.082,-0.341 -1.888,-1.143 -2.417,-1.955 -1.066,-1.664 -1.464,-3.464 -1.796,-5.222 -0.302,-1.77 -0.447,-3.54 -0.521,-5.304a0.639,0.639 0,0 1,1.277 -0.072&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_promo_quick_start.xml"
            line="80"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (2499 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M169.98,155.734c-4.134,-8.105 -5.986,-17.31 -5.617,-26.392a53.787,53.787 0,0 1,2.236 -13.441c0.669,-2.183 1.482,-4.33 2.532,-6.387 0.53,-1.027 1.109,-2.035 1.8,-2.993 0.692,-0.956 1.468,-1.884 2.534,-2.637 0.536,-0.365 1.17,-0.705 1.97,-0.785 0.409,-0.04 0.804,0.003 1.168,0.112a3.15,3.15 0,0 1,1.056 0.529c0.626,0.492 0.999,1.137 1.245,1.743a8.66,8.66 0,0 1,0.484 1.817c0.358,2.383 0.223,4.653 0.132,6.906 -0.102,2.244 -0.267,4.477 -0.184,6.63 0.047,1.057 0.163,2.149 0.509,2.937 0.175,0.396 0.388,0.62 0.604,0.7 0.402,0.14 0.919,0.289 1.36,0.32 0.916,0.095 1.747,-0.125 2.424,-0.704 0.689,-0.557 1.22,-1.426 1.623,-2.363 0.8,-1.902 1.166,-4.075 1.369,-6.24 0.197,-2.173 0.22,-4.381 0.13,-6.582 -0.072,-2.115 -0.57,-4.262 -1.095,-6.411 -1.066,-4.308 -2.494,-8.566 -3.383,-13.062 -0.214,-1.13 -0.394,-2.275 -0.46,-3.47 -0.033,-1.19 -0.072,-2.464 0.624,-3.828a3.167,3.167 0,0 1,1.859 -1.543c0.518,-0.15 1.044,-0.073 1.435,0.068 0.397,0.144 0.715,0.339 0.993,0.543 1.085,0.83 1.775,1.788 2.452,2.749 2.567,3.89 4.304,8.076 5.924,12.3a109.227,109.227 0,0 1,3.956 12.964c1.019,4.406 1.834,8.89 1.845,13.505 -0.006,1.154 -0.071,2.316 -0.255,3.484 -0.09,0.576 -0.22,1.186 -0.382,1.734l-0.472,1.636c-0.65,2.174 -1.392,4.307 -2.178,6.419 -3.202,8.429 -6.982,16.574 -10.99,24.62a0.692,0.692 0,0 1,-1.241 -0.607l0.005,-0.011c3.877,-8.045 7.513,-16.244 10.595,-24.605 0.767,-2.09 1.487,-4.196 2.11,-6.32 0.293,-1.076 0.649,-2.113 0.786,-3.141 0.16,-1.047 0.218,-2.128 0.22,-3.214 -0.03,-4.36 -0.838,-8.76 -1.86,-13.065a107.6,107.6 0,0 0,-3.947 -12.717c-1.595,-4.122 -3.363,-8.263 -5.762,-11.85 -0.602,-0.868 -1.283,-1.73 -1.992,-2.255 -0.351,-0.271 -0.677,-0.331 -0.688,-0.293 -0.222,0.08 -0.482,0.263 -0.636,0.577 -0.352,0.647 -0.42,1.717 -0.36,2.74 0.063,1.043 0.233,2.115 0.443,3.186 0.879,4.296 2.249,8.575 3.333,12.967 0.525,2.197 1.048,4.448 1.126,6.82 0.084,2.277 0.055,4.56 -0.162,6.848 -0.23,2.284 -0.601,4.592 -1.545,6.83 -0.486,1.103 -1.133,2.229 -2.19,3.092 -1.026,0.896 -2.544,1.289 -3.845,1.12 -0.677,-0.064 -1.247,-0.223 -1.897,-0.46 -0.844,-0.336 -1.362,-1.076 -1.627,-1.697 -0.536,-1.284 -0.598,-2.475 -0.662,-3.643 -0.078,-2.328 0.104,-4.573 0.212,-6.802 0.105,-2.215 0.224,-4.454 -0.083,-6.513 -0.153,-1.005 -0.491,-2 -1.027,-2.406 -0.547,-0.407 -1.248,-0.371 -2.038,0.197 -0.773,0.535 -1.48,1.335 -2.096,2.19 -0.624,0.857 -1.17,1.794 -1.67,2.756 -0.996,1.93 -1.786,3.987 -2.437,6.085 -1.298,4.202 -2.003,8.594 -2.238,12.998 -0.46,8.81 1.234,17.766 5.162,25.695a0.693,0.693 0,0 1,-1.237 0.62&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_promo_quick_start.xml"
            line="110"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (3302 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M94.567 57.807c-6.79 1.23-13.268 3.98-18.914 7.896-2.82 1.96-5.466 4.176-7.835 6.654-2.363 2.473-4.502 5.192-6.104 8.164-0.772 1.47-1.485 3.076-1.595 4.564-0.022 0.36 0.018 0.7 0.11 0.918 0.11 0.208 0.172 0.27 0.409 0.327 0.48 0.12 1.214-0.157 1.88-0.565 1.362-0.836 2.63-2.038 3.877-3.214l3.736-3.642c2.513-2.432 5.13-4.814 8.05-6.857 2.907-2.035 6.158-3.746 9.731-4.538 0.887-0.2 1.802-0.335 2.701-0.415 0.89-0.08 1.787-0.129 2.694-0.131 0.908 0.005 1.827 0.044 2.768 0.216 0.925 0.2 1.938 0.405 2.851 1.309 0.45 0.454 0.725 1.221 0.643 1.873-0.07 0.652-0.333 1.169-0.62 1.602-0.59 0.867-1.323 1.484-2.077 2.04-0.76 0.545-1.56 1.002-2.381 1.4l-2.387 1.09c-1.544 0.738-3.054 1.546-4.438 2.496-1.366 0.944-2.673 2.047-3.405 3.363-0.355 0.654-0.53 1.343-0.43 1.997 0.048 0.329 0.156 0.65 0.32 0.96 0.027 0.046 0.007 0.034 0.117 0.1 0.096 0.05 0.244 0.096 0.406 0.131 0.684 0.132 1.536 0.093 2.355 0.006 0.83-0.09 1.668-0.237 2.502-0.412 3.344-0.72 6.635-1.834 9.84-3.114 3.203-1.293 6.33-2.787 9.314-4.51 2.974-1.744 5.905-3.591 8.148-6.113 2.247-2.503 4.023-5.544 5.02-8.714l0.013-0.042c0.098-0.313 0.434-0.488 0.75-0.39 0.309 0.096 0.485 0.421 0.397 0.73-0.502 1.767-1.229 3.367-2.093 4.934-0.866 1.555-1.89 3.03-3.07 4.375-1.172 1.35-2.54 2.552-3.97 3.61-1.43 1.043-2.909 2.013-4.433 2.902-3.047 1.78-6.224 3.318-9.484 4.654-3.266 1.324-6.606 2.479-10.089 3.25-0.872 0.188-1.755 0.35-2.662 0.452-0.91 0.093-1.825 0.17-2.864-0.016-0.264-0.057-0.539-0.13-0.834-0.277-0.28-0.128-0.648-0.435-0.816-0.781-0.245-0.456-0.427-0.966-0.504-1.497-0.17-1.073 0.128-2.15 0.598-3.016 0.975-1.744 2.44-2.924 3.909-3.964 1.488-1.031 3.06-1.88 4.658-2.654l2.369-1.096c0.746-0.366 1.462-0.782 2.116-1.258 0.646-0.473 1.251-1.017 1.635-1.598 0.193-0.286 0.31-0.581 0.329-0.797 0.01-0.215-0.031-0.337-0.186-0.512-0.329-0.356-1.103-0.628-1.867-0.756-0.78-0.137-1.612-0.188-2.448-0.192-1.686 0.01-3.4 0.126-5.01 0.48-3.27 0.708-6.333 2.285-9.13 4.224-2.807 1.945-5.374 4.253-7.872 6.65l-3.761 3.633c-1.29 1.196-2.561 2.422-4.179 3.414-0.41 0.243-0.849 0.468-1.353 0.629-0.499 0.156-1.091 0.257-1.708 0.116-0.63-0.093-1.313-0.658-1.533-1.254-0.243-0.59-0.26-1.137-0.235-1.64 0.067-1.006 0.344-1.895 0.66-2.754 0.323-0.856 0.714-1.669 1.138-2.458 1.715-3.146 3.94-5.933 6.389-8.48 2.46-2.54 5.179-4.829 8.114-6.8 5.858-3.956 12.554-6.698 19.533-7.872 0.326-0.055 0.636 0.162 0.69 0.487 0.056 0.321-0.162 0.627-0.483 0.686m-1.997-5.609c-2.599 0.586-5.14 1.379-7.598 2.372-2.449 1.013-4.841 2.167-7.09 3.563-2.25 1.388-4.41 2.925-6.356 4.697-1.964 1.747-3.736 3.709-5.146 5.9l-0.009 0.014c-0.179 0.277-0.549 0.358-0.828 0.18-0.26-0.165-0.348-0.5-0.211-0.77 1.263-2.487 3.062-4.641 5.043-6.555 2.012-1.887 4.218-3.563 6.58-4.976 2.365-1.403 4.838-2.637 7.43-3.566 2.58-0.948 5.254-1.65 7.976-2.033 0.327-0.046 0.63 0.18 0.677 0.505 0.043 0.309-0.159 0.596-0.459 0.664l-0.008 0.002zm-26.758 9.171c1.169-2.21 2.848-4.025 4.626-5.655 1.78-1.642 3.736-3.059 5.725-4.405 2-1.335 4.098-2.51 6.229-3.612 2.149-1.067 4.343-2.043 6.607-2.835 0.313-0.11 0.656 0.054 0.765 0.364 0.102 0.288-0.036 0.604-0.306 0.736-2.122 1.026-4.224 2.077-6.275 3.22-2.068 1.112-4.071 2.331-6.038 3.6-1.967 1.266-3.839 2.669-5.628 4.146-1.765 1.498-3.424 3.137-4.658 5.016l-0.018 0.027c-0.18 0.275-0.55 0.353-0.827 0.173-0.26-0.169-0.344-0.507-0.203-0.775&quot;"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_publish_button_124dp.xml"
            line="51"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (806 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M200.9 40c-0.4 0.4-0.9 0.6-1.4 0.6-0.6 0.1-1.1 0-1.6-0.3s-0.8-0.5-1.2-0.7c-0.4-0.2-0.8-0.2-1.2-0.4-0.1 0-0.2-0.1-0.1-0.2v-0.1c0-0.1 0-0.1 0.1-0.1 0.5-0.2 1.1-0.3 1.6-0.2 0.5 0.1 1 0.3 1.4 0.6 0.3 0.2 0.7 0.3 1.1 0.3 0.5 0 1 0 1.4 0.2-0.1 0.2 0 0.2-0.1 0.3zm10.5 28.1C211 77 210.5 86 210 94.9l-0.4 6.7-0.2 3.4c-0.1 1.2-0.6 2.3-1.3 3.3-1.5 1.9-3.9 2.9-6.3 2.7h-13.4c-2.4 0.2-4.8-0.8-6.4-2.7-0.8-1-1.3-2.1-1.4-3.4-0.1-1.2-0.1-2.3-0.1-3.4l-0.2-6.7-0.9-26.8c0-0.2 0.2-0.4 0.4-0.5l12.8 0.1c4.3 0 8.5 0.1 12.8 0.1 0.1 0 0.2 0.1 0.2 0.2s-0.1 0.2-0.2 0.2c-4.3 0.1-8.5 0.1-12.8 0.1l-12.8 0.1 0.4-0.5 1.1 26.8 0.3 6.7c0.1 1.1 0.1 2.3 0.2 3.3s0.5 2 1.2 2.8c0.6 0.8 1.5 1.4 2.4 1.8 1 0.4 2 0.5 3.1 0.5h13.4c2.1 0.1 4.1-0.7 5.5-2.3 0.6-0.8 1-1.8 1.1-2.8l0.2-3.3 0.5-6.7c0.6-8.9 1.3-17.8 2.1-26.8 0-0.1 0-0.1 0.1-0.1v0.4z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_error_camera_pencils_226dp.xml"
            line="25"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1377 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M48.8 64.6c-0.1-0.2-0.2-0.5-0.3-0.7 0-0.1 0-0.1-0.1-0.2l-0.1-0.1c-0.1-0.1-0.1-0.1-0.2-0.1h-0.7c-0.2 0-0.3 0.1-0.4 0.3s0 0.5 0.5 0.6c0.1 0 0.2 0.1 0.1 0.2v0.1c0 0.1 0 0.1-0.1 0.1-0.3 0.1-0.6 0.1-0.9-0.1-0.3-0.2-0.5-0.5-0.6-0.9 0-0.4 0.1-0.7 0.3-1 0.3-0.3 0.6-0.4 1-0.4H48c0.4 0 0.8 0.2 1 0.5 0.1 0.2 0.2 0.3 0.2 0.5v0.5c-0.1 0.2-0.2 0.5-0.4 0.7 0 0.2 0.1 0.1 0 0zm7.3 0c-0.1-0.2-0.2-0.5-0.3-0.7 0-0.1 0-0.1-0.1-0.2l-0.1-0.1c-0.1-0.1-0.1-0.1-0.2-0.1h-0.7c-0.2 0-0.3 0.1-0.4 0.3-0.1 0.2 0 0.5 0.5 0.6 0.1 0 0.2 0.1 0.1 0.2v0.1c0 0.1 0 0.1-0.1 0.1-0.3 0.1-0.6 0.1-0.9-0.1-0.3-0.2-0.5-0.5-0.6-0.9 0-0.4 0.1-0.7 0.3-1 0.3-0.3 0.6-0.4 1-0.4h0.7c0.4 0 0.8 0.2 1 0.5 0.1 0.2 0.2 0.3 0.2 0.5v0.5c-0.1 0.2-0.2 0.5-0.4 0.7 0.2 0.1 0.1 0.1 0 0zM70.5 106l-11.3 0.2-11.3 0.1-22.5 0.2h-2.8c-1 0-2-0.2-2.9-0.6-1.8-0.9-3.1-2.7-3.5-4.7-0.1-1-0.1-1.9-0.1-2.9V77.2c0-0.5 0-1 0.1-1.5 0.1-1 0.5-2 1.1-2.8 1.2-1.7 3.1-2.7 5.2-2.7h47.9c1 0 2 0.2 2.9 0.6 1.8 0.9 3.1 2.7 3.5 4.7 0.1 1 0.1 1.9 0.1 2.9v8.4L76.6 98c0 0.9 0 1.9-0.1 2.8-0.1 1-0.5 1.9-1.1 2.7-1.1 1.6-3 2.6-4.9 2.5zm0-0.3c1.8 0 3.6-0.9 4.6-2.4 0.5-0.7 0.8-1.6 0.9-2.5 0.1-0.9 0.1-1.9 0-2.8l-0.1-11.3v-8.4c0-0.9 0-1.8-0.1-2.7-0.3-1.7-1.4-3.2-3-4-0.8-0.4-1.6-0.5-2.5-0.5H22.4c-1.7 0-3.4 0.9-4.4 2.3-0.5 0.7-0.8 1.5-0.9 2.4-0.1 0.4-0.1 0.9-0.1 1.3v21.1c0 0.9 0 1.8 0.1 2.7 0.3 1.7 1.4 3.2 3 4 0.8 0.4 1.6 0.6 2.5 0.5h2.8l22.5 0.2 11.3 0.1h11.3z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_error_camera_pencils_226dp.xml"
            line="43"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1613 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M63.6 91.9c-1.4 4.8-6.4 7.6-11.2 6.2-2.1-0.6-3.9-1.9-5.1-3.8-2.8-4.1-1.9-9.6 2-12.6 1.8-1.5 4.2-2.1 6.5-1.9 2.3 0.2 4.5 1.3 6.1 3 1.5 1.7 2.4 4 2.3 6.3 0 0.1-0.1 0.2-0.2 0.2s-0.2-0.1-0.2-0.2c-0.1-2.1-1-4.1-2.4-5.7-1.5-1.5-3.5-2.5-5.6-2.6-2.1-0.2-4.2 0.5-5.8 1.8-1.6 1.3-2.7 3.2-3 5.2s0.1 4.1 1.2 5.9c1.2 1.8 2.9 3 5 3.5s4.2 0.3 6.1-0.7c1.9-1 3.4-2.7 4.3-4.6-0.1-0.2-0.1-0.2 0-0.2v0.2zM32.5 106l-13 0.3c-0.6 0-1.2-0.1-1.8-0.3-0.5-0.3-1-0.8-1.3-1.3-0.2-0.6-0.3-1.2-0.3-1.8v-1.6L16 94.8V78.5c-0.1-1.1 0-2.2 0.1-3.3 0.3-2.3 1.5-4.4 3.3-5.9 1.8-1.5 4-2.3 6.3-2.4 1.1-0.1 2.3 0.1 3.4 0.4 1.1 0.3 2.2 0.9 3.1 1.6 1.8 1.5 3 3.6 3.3 5.9 0.1 1.2 0.1 2.2 0.1 3.3v3.3l-0.1 13-0.1 6.5v1.6c0 0.6 0 1.1-0.1 1.7-0.5 1.2-1.6 1.9-2.8 1.8zm0-0.3c1 0 1.9-0.7 2.2-1.7 0.1-0.5 0-1 0.1-1.6v-1.6l-0.1-6.5-0.1-13V78c0-1.1 0-2.2-0.1-3.2-0.2-2-1.3-3.9-2.9-5.2-0.8-0.6-1.7-1.1-2.7-1.4-1-0.3-2.1-0.4-3.1-0.3-4.2 0-7.8 3.1-8.5 7.3-0.1 1.1-0.2 2.1-0.1 3.2v16.3l-0.1 6.5v1.6c0 0.5 0 1 0.2 1.4 0.2 0.4 0.5 0.8 0.9 1 0.4 0.2 0.9 0.3 1.4 0.3 4.2 0.1 8.6 0.2 12.9 0.2zm36.7-5.5c0.5-0.2 1 0 1.3 0.4v0.1c0.3 0.5 0.2 1.2-0.3 1.6-0.4 0.4-1.1 0.5-1.6 0.3s-0.8-0.8-0.6-1.3c0-0.1 0.1-0.2 0.2-0.1h0.1c0.1 0 0.1 0 0.1 0.1 0.4 0.5 0.8 0.5 1 0.3 0.2-0.2 0.2-0.3 0.1-0.4-0.1-0.1-0.1-0.4-0.4-0.7 0-0.2 0-0.2 0.1-0.3zM44.3 77.4c-1.3 0.3-2.7 0.4-4 0.4h-1.6c-0.3 0-0.6-0.2-0.8-0.5-0.1-0.2-0.2-0.5-0.2-0.8v-1.6c0-0.3 0.2-0.6 0.5-0.8 0.2-0.1 0.5-0.2 0.8-0.2h4.5c0.2 0 0.5 0.1 0.7 0.2 0.2 0.2 0.4 0.4 0.4 0.7v0.6c0 0.3-0.1 0.7-0.1 1 0 0.1-0.1 0.2-0.2 0.2s-0.2-0.1-0.2-0.2c0-0.3-0.1-0.7-0.1-1V75c0-0.1 0-0.1-0.1-0.1h-5v1.6h1.5c1.3 0 2.7 0.1 4 0.4-0.1 0.3 0 0.3-0.1 0.5z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_error_camera_pencils_226dp.xml"
            line="49"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1361 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M18.4 70.1c0.9-0.1 1.7 0 2.5 0.4 0.7 0.4 1.3 1 1.8 1.7 0.4 0.6 1 1 1.6 1.4 0.7 0.3 1.4 0.4 2.1 0.4 0.7 0 1.4-0.1 2.1-0.4 0.7-0.3 1.3-0.8 1.8-1.3 0.6-0.6 1.3-1.1 2-1.6 0.8-0.4 1.6-0.6 2.5-0.5 0.1 0 0.2 0.1 0.2 0.2s-0.1 0.2-0.2 0.2c-0.7 0.1-1.5 0.3-2.1 0.7-0.6 0.5-1.2 1-1.7 1.6-0.6 0.6-1.3 1.2-2 1.6-1.6 0.8-3.5 0.8-5.1 0.1-0.8-0.4-1.4-1.1-1.9-1.8-0.4-0.6-0.9-1.2-1.5-1.7-0.7-0.5-1.4-0.8-2.1-1-0.1 0.2-0.1 0.2 0 0-0.1 0.1 0 0.1 0 0zm58 5.8c0.2 1.9-0.2 3.8-0.9 5.5-0.7 1.6-1.1 3.4-1.1 5.2-0.1 1.8 0.3 3.5 1 5.1 0.4 0.9 0.7 1.8 0.9 2.7 0.2 0.9 0.3 1.9 0.2 2.8 0 0.1-0.1 0.2-0.2 0.2s-0.2-0.1-0.2-0.2c-0.1-0.9-0.3-1.8-0.6-2.6-0.3-0.9-0.7-1.7-1.1-2.5-0.8-1.7-1.3-3.6-1.3-5.5 0-1 0.1-2 0.4-2.9 0.2-0.9 0.6-1.8 0.9-2.7 0.3-0.9 0.7-1.7 1-2.5 0.3-0.8 0.5-1.7 0.6-2.6 0.2-0.1 0.3-0.1 0.4 0zM16.6 82c0.1 2.2-0.2 4.4-0.9 6.5s-1.9 4-3.5 5.6c-1.6 1.5-3.3 2.8-5.2 4-1.8 1-3.4 2.6-4.4 4.4-0.8 1.9-0.9 4-0.1 5.9s2.3 3.4 4.2 4.2c1.9 0.9 4 1.4 6.1 1.7 2.1 0.3 4.3 0.4 6.4 0.4 8.6-0.2 17.2-1.1 25.7-2.9 8.5-1.6 16.9-3.7 25.3-6 0.1 0 0.2 0 0.2 0.1s0 0.2-0.1 0.2c-4.1 1.3-8.3 2.5-12.5 3.6-4.2 1.1-8.4 2.1-12.7 3-4.3 0.9-8.6 1.6-12.9 2.2s-8.7 0.9-13.1 0.9c-2.2 0-4.4-0.1-6.6-0.4-2.2-0.2-4.4-0.9-6.4-1.8-2.1-0.9-3.8-2.7-4.7-4.8-0.4-1.1-0.6-2.2-0.6-3.4 0-1.2 0.2-2.3 0.7-3.4 1-2.1 3-3.5 4.8-4.7 1.8-1.2 3.6-2.4 5.2-3.8 1.5-1.4 2.7-3.2 3.5-5.2 0.7-2 1.1-4.1 1.2-6.3 0.2-0.1 0.3-0.1 0.4 0z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_error_camera_pencils_226dp.xml"
            line="52"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (822 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M112.3,32.8C97.2,32.8,85,45,85,60.1s12.2,27.3,27.3,27.3s27.3-12.2,27.3-27.3C139.5,45,127.3,32.8,112.3,32.8z M87.8,60c0-3.4,0.7-6.8,2.1-10l11.7,32C93.1,77.9,87.7,69.4,87.8,60z M112.3,84.6c-2.3,0-4.7-0.4-6.9-1l7.4-21.4l7.5,20.6 c0,0.1,0.1,0.2,0.2,0.3C117.8,84.1,115.1,84.6,112.3,84.6z M115.7,48.5l2.8-0.2c0.6-0.1,1-0.5,0.9-1.1c-0.1-0.6-0.5-1-1.1-0.9 c0,0-4,0.3-6.5,0.3s-6.5-0.3-6.5-0.3c-0.6-0.1-1,0.3-1.1,0.9c-0.1,0.6,0.3,1,0.9,1.1c0.9,0.1,1.7,0.2,2.6,0.2l3.9,10.5l-5.4,16.1 l-8.9-26.6l2.8-0.2c0.6-0.1,1-0.5,0.9-1.1c-0.1-0.6-0.5-1-1.1-0.9c0,0-4,0.3-6.5,0.3h-1.6c7.4-11.4,22.7-14.5,34-7.1 c1.1,0.7,2.1,1.5,3.1,2.4h-0.3c-2.3,0.1-4.2,2-4.1,4.4c0,2,1.2,3.7,2.4,5.7c1.3,2,2,4.4,2,6.8c-0.1,2.7-0.8,5.4-1.9,7.9l-2.4,8.2 L115.7,48.5z M124.6,81.2l7.5-21.7c1.2-2.8,1.8-5.8,1.9-8.8c0-0.8-0.1-1.7-0.2-2.5C140.1,59.9,136,74.5,124.6,81.2z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_wordpress_camera_pencils_226dp.xml"
            line="10"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (835 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M200.9,40c-0.4,0.4-0.9,0.6-1.4,0.6c-0.6,0.1-1.1,0-1.6-0.3s-0.8-0.5-1.2-0.7c-0.4-0.2-0.8-0.2-1.2-0.4 c-0.1,0-0.2-0.1-0.1-0.2v-0.1c0-0.1,0-0.1,0.1-0.1c0.5-0.2,1.1-0.3,1.6-0.2c0.5,0.1,1,0.3,1.4,0.6c0.3,0.2,0.7,0.3,1.1,0.3 c0.5,0,1,0,1.4,0.2C200.9,39.9,201,39.9,200.9,40z M211.4,68.1C211,77,210.5,86,210,94.9l-0.4,6.7l-0.2,3.4 c-0.1,1.2-0.6,2.3-1.3,3.3c-1.5,1.9-3.9,2.9-6.3,2.7h-13.4c-2.4,0.2-4.8-0.8-6.4-2.7c-0.8-1-1.3-2.1-1.4-3.4 c-0.1-1.2-0.1-2.3-0.1-3.4l-0.2-6.7L179.4,68c0-0.2,0.2-0.4,0.4-0.5l12.8,0.1c4.3,0,8.5,0.1,12.8,0.1c0.1,0,0.2,0.1,0.2,0.2 s-0.1,0.2-0.2,0.2c-4.3,0.1-8.5,0.1-12.8,0.1l-12.8,0.1l0.4-0.5l1.1,26.8l0.3,6.7c0.1,1.1,0.1,2.3,0.2,3.3c0.1,1,0.5,2,1.2,2.8 c0.6,0.8,1.5,1.4,2.4,1.8c1,0.4,2,0.5,3.1,0.5h13.4c2.1,0.1,4.1-0.7,5.5-2.3c0.6-0.8,1-1.8,1.1-2.8l0.2-3.3l0.5-6.7 c0.6-8.9,1.3-17.8,2.1-26.8c0-0.1,0-0.1,0.1-0.1V68.1z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_wordpress_camera_pencils_226dp.xml"
            line="35"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1453 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M48.8,64.6c-0.1-0.2-0.2-0.5-0.3-0.7c0-0.1,0-0.1-0.1-0.2l-0.1-0.1c-0.1-0.1-0.1-0.1-0.2-0.1h-0.7 c-0.2,0-0.3,0.1-0.4,0.3s0,0.5,0.5,0.6c0.1,0,0.2,0.1,0.1,0.2v0.1c0,0.1,0,0.1-0.1,0.1c-0.3,0.1-0.6,0.1-0.9-0.1 c-0.3-0.2-0.5-0.5-0.6-0.9c0-0.4,0.1-0.7,0.3-1c0.3-0.3,0.6-0.4,1-0.4H48c0.4,0,0.8,0.2,1,0.5c0.1,0.2,0.2,0.3,0.2,0.5v0.5 C49.1,64.1,49,64.4,48.8,64.6C48.8,64.8,48.9,64.7,48.8,64.6z M56.1,64.6c-0.1-0.2-0.2-0.5-0.3-0.7c0-0.1,0-0.1-0.1-0.2l-0.1-0.1 c-0.1-0.1-0.1-0.1-0.2-0.1h-0.7c-0.2,0-0.3,0.1-0.4,0.3c-0.1,0.2,0,0.5,0.5,0.6c0.1,0,0.2,0.1,0.1,0.2v0.1c0,0.1,0,0.1-0.1,0.1 c-0.3,0.1-0.6,0.1-0.9-0.1c-0.3-0.2-0.5-0.5-0.6-0.9c0-0.4,0.1-0.7,0.3-1c0.3-0.3,0.6-0.4,1-0.4h0.7c0.4,0,0.8,0.2,1,0.5 c0.1,0.2,0.2,0.3,0.2,0.5v0.5C56.4,64.1,56.3,64.4,56.1,64.6C56.3,64.7,56.2,64.7,56.1,64.6z M70.5,106l-11.3,0.2l-11.3,0.1 l-22.5,0.2h-2.8c-1,0-2-0.2-2.9-0.6c-1.8-0.9-3.1-2.7-3.5-4.7c-0.1-1-0.1-1.9-0.1-2.9V77.2c0-0.5,0-1,0.1-1.5c0.1-1,0.5-2,1.1-2.8 c1.2-1.7,3.1-2.7,5.2-2.7h47.9c1,0,2,0.2,2.9,0.6c1.8,0.9,3.1,2.7,3.5,4.7c0.1,1,0.1,1.9,0.1,2.9v8.4L76.6,98c0,0.9,0,1.9-0.1,2.8 c-0.1,1-0.5,1.9-1.1,2.7C74.3,105.1,72.4,106.1,70.5,106z M70.5,105.7c1.8,0,3.6-0.9,4.6-2.4c0.5-0.7,0.8-1.6,0.9-2.5 c0.1-0.9,0.1-1.9,0-2.8l-0.1-11.3v-8.4c0-0.9,0-1.8-0.1-2.7c-0.3-1.7-1.4-3.2-3-4c-0.8-0.4-1.6-0.5-2.5-0.5H22.4 c-1.7,0-3.4,0.9-4.4,2.3c-0.5,0.7-0.8,1.5-0.9,2.4C17,76.2,17,76.7,17,77.1v21.1c0,0.9,0,1.8,0.1,2.7c0.3,1.7,1.4,3.2,3,4 c0.8,0.4,1.6,0.6,2.5,0.5h2.8l22.5,0.2l11.3,0.1H70.5z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_wordpress_camera_pencils_226dp.xml"
            line="65"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1724 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M63.6,91.9c-1.4,4.8-6.4,7.6-11.2,6.2c-2.1-0.6-3.9-1.9-5.1-3.8c-2.8-4.1-1.9-9.6,2-12.6 c1.8-1.5,4.2-2.1,6.5-1.9c2.3,0.2,4.5,1.3,6.1,3c1.5,1.7,2.4,4,2.3,6.3c0,0.1-0.1,0.2-0.2,0.2s-0.2-0.1-0.2-0.2 c-0.1-2.1-1-4.1-2.4-5.7c-1.5-1.5-3.5-2.5-5.6-2.6c-2.1-0.2-4.2,0.5-5.8,1.8c-1.6,1.3-2.7,3.2-3,5.2s0.1,4.1,1.2,5.9 c1.2,1.8,2.9,3,5,3.5c2.1,0.5,4.2,0.3,6.1-0.7C61.2,95.5,62.7,93.8,63.6,91.9c-0.1-0.2-0.1-0.2,0-0.2V91.9z M32.5,106l-13,0.3 c-0.6,0-1.2-0.1-1.8-0.3c-0.5-0.3-1-0.8-1.3-1.3c-0.2-0.6-0.3-1.2-0.3-1.8v-1.6L16,94.8V78.5c-0.1-1.1,0-2.2,0.1-3.3 c0.3-2.3,1.5-4.4,3.3-5.9c1.8-1.5,4-2.3,6.3-2.4c1.1-0.1,2.3,0.1,3.4,0.4c1.1,0.3,2.2,0.9,3.1,1.6c1.8,1.5,3,3.6,3.3,5.9 c0.1,1.2,0.1,2.2,0.1,3.3v3.3l-0.1,13l-0.1,6.5v1.6c0,0.6,0,1.1-0.1,1.7C34.8,105.4,33.7,106.1,32.5,106z M32.5,105.7 c1,0,1.9-0.7,2.2-1.7c0.1-0.5,0-1,0.1-1.6v-1.6l-0.1-6.5l-0.1-13V78c0-1.1,0-2.2-0.1-3.2c-0.2-2-1.3-3.9-2.9-5.2 c-0.8-0.6-1.7-1.1-2.7-1.4c-1-0.3-2.1-0.4-3.1-0.3c-4.2,0-7.8,3.1-8.5,7.3c-0.1,1.1-0.2,2.1-0.1,3.2v16.3l-0.1,6.5v1.6 c0,0.5,0,1,0.2,1.4c0.2,0.4,0.5,0.8,0.9,1c0.4,0.2,0.9,0.3,1.4,0.3C23.8,105.6,28.2,105.7,32.5,105.7z M69.2,100.2 c0.5-0.2,1,0,1.3,0.4v0.1c0.3,0.5,0.2,1.2-0.3,1.6c-0.4,0.4-1.1,0.5-1.6,0.3c-0.5-0.2-0.8-0.8-0.6-1.3c0-0.1,0.1-0.2,0.2-0.1h0.1 c0.1,0,0.1,0,0.1,0.1c0.4,0.5,0.8,0.5,1,0.3c0.2-0.2,0.2-0.3,0.1-0.4c-0.1-0.1-0.1-0.4-0.4-0.7C69.1,100.3,69.1,100.3,69.2,100.2z  M44.3,77.4c-1.3,0.3-2.7,0.4-4,0.4h-1.6c-0.3,0-0.6-0.2-0.8-0.5c-0.1-0.2-0.2-0.5-0.2-0.8v-1.6c0-0.3,0.2-0.6,0.5-0.8 c0.2-0.1,0.5-0.2,0.8-0.2h4.5c0.2,0,0.5,0.1,0.7,0.2c0.2,0.2,0.4,0.4,0.4,0.7v0.6c0,0.3-0.1,0.7-0.1,1c0,0.1-0.1,0.2-0.2,0.2 c-0.1,0-0.2-0.1-0.2-0.2c0-0.3-0.1-0.7-0.1-1V75c0-0.1,0-0.1-0.1-0.1h-5v1.6h1.5c1.3,0,2.7,0.1,4,0.4C44.3,77.2,44.4,77.2,44.3,77.4 z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_wordpress_camera_pencils_226dp.xml"
            line="75"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1444 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M18.4,70.1c0.9-0.1,1.7,0,2.5,0.4c0.7,0.4,1.3,1,1.8,1.7c0.4,0.6,1,1,1.6,1.4c0.7,0.3,1.4,0.4,2.1,0.4 c0.7,0,1.4-0.1,2.1-0.4c0.7-0.3,1.3-0.8,1.8-1.3c0.6-0.6,1.3-1.1,2-1.6c0.8-0.4,1.6-0.6,2.5-0.5c0.1,0,0.2,0.1,0.2,0.2 s-0.1,0.2-0.2,0.2c-0.7,0.1-1.5,0.3-2.1,0.7c-0.6,0.5-1.2,1-1.7,1.6c-0.6,0.6-1.3,1.2-2,1.6c-1.6,0.8-3.5,0.8-5.1,0.1 c-0.8-0.4-1.4-1.1-1.9-1.8c-0.4-0.6-0.9-1.2-1.5-1.7C19.8,70.6,19.1,70.3,18.4,70.1C18.3,70.3,18.3,70.3,18.4,70.1 C18.3,70.2,18.4,70.2,18.4,70.1z M76.4,75.9c0.2,1.9-0.2,3.8-0.9,5.5c-0.7,1.6-1.1,3.4-1.1,5.2c-0.1,1.8,0.3,3.5,1,5.1 c0.4,0.9,0.7,1.8,0.9,2.7c0.2,0.9,0.3,1.9,0.2,2.8c0,0.1-0.1,0.2-0.2,0.2c-0.1,0-0.2-0.1-0.2-0.2c-0.1-0.9-0.3-1.8-0.6-2.6 c-0.3-0.9-0.7-1.7-1.1-2.5c-0.8-1.7-1.3-3.6-1.3-5.5c0-1,0.1-2,0.4-2.9c0.2-0.9,0.6-1.8,0.9-2.7c0.3-0.9,0.7-1.7,1-2.5 c0.3-0.8,0.5-1.7,0.6-2.6C76.2,75.8,76.3,75.8,76.4,75.9z M16.6,82c0.1,2.2-0.2,4.4-0.9,6.5s-1.9,4-3.5,5.6c-1.6,1.5-3.3,2.8-5.2,4 c-1.8,1-3.4,2.6-4.4,4.4c-0.8,1.9-0.9,4-0.1,5.9s2.3,3.4,4.2,4.2c1.9,0.9,4,1.4,6.1,1.7c2.1,0.3,4.3,0.4,6.4,0.4 c8.6-0.2,17.2-1.1,25.7-2.9c8.5-1.6,16.9-3.7,25.3-6c0.1,0,0.2,0,0.2,0.1s0,0.2-0.1,0.2c-4.1,1.3-8.3,2.5-12.5,3.6 c-4.2,1.1-8.4,2.1-12.7,3c-4.3,0.9-8.6,1.6-12.9,2.2s-8.7,0.9-13.1,0.9c-2.2,0-4.4-0.1-6.6-0.4c-2.2-0.2-4.4-0.9-6.4-1.8 c-2.1-0.9-3.8-2.7-4.7-4.8c-0.4-1.1-0.6-2.2-0.6-3.4c0-1.2,0.2-2.3,0.7-3.4c1-2.1,3-3.5,4.8-4.7c1.8-1.2,3.6-2.4,5.2-3.8 c1.5-1.4,2.7-3.2,3.5-5.2c0.7-2,1.1-4.1,1.2-6.3C16.4,81.9,16.5,81.9,16.6,82z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_site_wordpress_camera_pencils_226dp.xml"
            line="80"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1149 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M1232.9 937l-24.2 0.3c-4 0-8.1 0.1-12.1 0.2l-6.1 0.2h-2.7v-2.9h0.3l3-0.1v3.1c-9.4 0.3-18.7-3.1-26.2-8.6s-13.6-12.7-18.7-20.3c-10-15.4-16.5-32.5-21.9-49.7a450.9 450.9 0 0 1-12.6-52.5c-3.2-17.7-5.8-35.5-7.4-53.5a3.3 3.3 0 0 1 3-3.5h0.3l107.9-0.1 107.9 0.3a3.2 3.2 0 0 1 3.2 3.2 3.5 3.5 0 0 1 0 0.5c-2.9 17.9-6.7 35.4-11 53a498.4 498.4 0 0 1-15.5 51.8c-6.3 16.9-13.8 33.6-24 48.6a95.6 95.6 0 0 1-18.1 20.3c-7 5.8-15.8 10-25.1 9.9zm0-1.5c8.8-0.2 17.1-4.3 23.7-10s11.9-13.1 16.5-20.6a178.5 178.5 0 0 0 11.9-23.8q5.3-12.2 9.6-24.9c5.8-16.8 10.8-34 15-51.3s7.8-34.9 10.6-52.5l3.2 3.7-107.9 0.3-107.9-0.1 3.3-3.6c1.5 17.6 3.9 35.4 7 52.9a444.8 444.8 0 0 0 12.3 51.8c5.1 17 11.8 33.5 20.8 48.5a80.6 80.6 0 0 0 16.8 19.6 38.8 38.8 0 0 0 23.4 9.2h0.1a1.6 1.6 0 0 1-0.1 3.1l-3-0.1h-0.3v-2.9h2.7l6.1 0.2c4 0.1 8.1 0.2 12.1 0.2zm91.2-124.1c5.9 6 8.4 14 10 22a50.9 50.9 0 0 1-1.1 24.8 42.4 42.4 0 0 1-14.2 20.5l-2.4 2c-0.8 0.6-1.7 1.1-2.6 1.6-1.7 1.1-3.5 2.1-5.3 3.1a44.8 44.8 0 0 1-11.7 3.3 0.8 0.8 0 0 1-0.6-1.3l0.1-0.1a69.9 69.9 0 0 1 9.5-6.7c2.9-2.4 6.4-4 8.9-6.7a38.5 38.5 0 0 0 11.7-17.9c2.3-6.8 2.5-14.3 1.6-21.7s-3.6-14.5-5-22.3v-0.1a0.8 0.8 0 0 1 1.3-0.7z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_blog_80dp.xml"
            line="34"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1453 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M303.1 333.9l88.8-1.3 88.8-0.8c59.2-0.6 118.5-0.5 177.7-0.7s118.5 0.2 177.7 0.4c59.2 0.6 118.5 1.1 177.7 2.4a5.9 5.9 0 0 1 0 11.9c-59.2 1.4-118.5 1.9-177.7 2.4-59.2 0.2-118.5 0.6-177.7 0.4s-118.5-0.1-177.7-0.7l-88.8-0.8-88.8-1.3a5.9 5.9 0 0 1 0-11.9zM386 475.6c46.4-0.6 92.8-1.2 139.2-1.4l139.2-0.5 139.2 0.3 69.6 0.6 69.6 1a4 4 0 0 1 0 7.9l-69.6 1-69.6 0.6-139.2 0.3-139.2-0.5c-46.4-0.2-92.8-0.8-139.2-1.4a4 4 0 0 1 0-7.9zm0 68.4c46.4-0.6 92.8-1.2 139.2-1.4l139.2-0.5 139.2 0.3 69.6 0.6 69.6 1a4 4 0 0 1 0 7.9l-69.6 1-69.6 0.6-139.2 0.3-139.2-0.5c-46.4-0.2-92.8-0.8-139.2-1.4a4 4 0 0 1 0-7.9zm-71.2 68.5q87.4-1 174.8-1.4l174.8-0.5 174.8 0.3 87.4 0.6 87.4 1a4 4 0 0 1 0 7.9l-87.4 1-87.4 0.6-174.8 0.4-174.8-0.5q-87.4-0.3-174.8-1.4a4 4 0 0 1 0-7.9zm39.3 68.4q77.6-1 155.1-1.4l155.1-0.5 155.1 0.3 77.6 0.6 77.6 1a4 4 0 0 1 0 7.9l-77.6 1-77.6 0.6-155.1 0.3-155.1-0.5q-77.6-0.3-155.1-1.4a4 4 0 0 1 0-7.9zm-14.6 68.4q81.2-1 162.4-1.4l162.4-0.5 162.4 0.3 81.2 0.6 81.2 1a4 4 0 0 1 0 7.9l-81.2 1-81.2 0.6-162.4 0.3-162.4-0.5q-81.2-0.3-162.4-1.4a4 4 0 0 1 0-7.9zm-31.8 68.5q89.2-1 178.3-1.4l178.3-0.5 178.3 0.3 89.2 0.6 89.2 1a4 4 0 0 1 0 7.9l-89.2 1-89.2 0.6-178.3 0.3-178.3-0.5q-89.2-0.3-178.3-1.4a4 4 0 0 1 0-7.9zm196.5 68.4c26.7-0.6 53.4-1.2 80.1-1.4 26.7-0.4 53.4-0.3 80.1-0.5s53.4 0.2 80.1 0.3c26.7 0.4 53.4 0.7 80.1 1.6a4 4 0 0 1 0 7.9c-26.7 0.9-53.4 1.3-80.1 1.6-26.7 0.1-53.4 0.4-80.1 0.3s-53.4-0.1-80.1-0.5c-26.7-0.2-53.4-0.8-80.1-1.4a4 4 0 0 1 0-7.9z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_blog_80dp.xml"
            line="37"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (944 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M1137.7 455.4c-17.2-0.3-34.3-0.9-51.5-1.1 0.2-9.8-1-19.4-5.3-29a34.2 34.2 0 0 0-12.5-14.5c-1.5-0.8-2.9-1.6-4.4-2.3l-4.7-1.5a59.4 59.4 0 0 0-8.7-1.7 63.2 63.2 0 0 0-17.8 0.2 51.7 51.7 0 0 0-8.9 2.2 45.3 45.3 0 0 0-4.3 1.7l-2.1 1a4.4 4.4 0 0 1-0.7 0.3 2.1 2.1 0 0 1-1.9-0.5 2.3 2.3 0 0 1-0.6-0.9l-1.8-4.2a43.1 43.1 0 0 0-11.6-14.7 41.2 41.2 0 0 0-17-8 50.7 50.7 0 0 0-18.1-0.6c-12.1 1.3-23.5 7.5-31.8 15.9s-14.2 18.4-18.8 28.7a144.6 144.6 0 0 0-9 28.1l-45.8 0.9a4.1 4.1 0 0 0 0 8.1l50 1a4.9 4.9 0 0 0 4.9-3.9l0.1-0.3c4.4-19.9 12.7-40.5 26.8-54.3 7-6.9 15.7-11.4 25.1-12.4 9.4-1.3 19.4 0.7 26.2 6.3a30.9 30.9 0 0 1 8.2 10.6c0.5 1 0.9 2.1 1.4 3.2a14.5 14.5 0 0 0 4 5.7 14.2 14.2 0 0 0 13.3 2.9 17.2 17.2 0 0 0 3-1.3l1.5-0.8a33 33 0 0 1 3.2-1.3 39.7 39.7 0 0 1 6.8-1.8 51.3 51.3 0 0 1 14.4-0.2 48.3 48.3 0 0 1 7.2 1.3l3.1 0.9 2.8 1.5a23.8 23.8 0 0 1 8.4 9.6c4.2 8.2 5.3 19 4.8 28.6v0.6a5.2 5.2 0 0 0 5.3 5.2c19-0.2 38-0.8 57-1.2a4.1 4.1 0 0 0 0-8.1z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_portfolio_80dp.xml"
            line="46"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1334 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M395.8 808.1a0.6 0.6 0 0 0-0.8-0.3 174.2 174.2 0 0 0-23.2 11.7c-7.4 4.4-14.9 8.8-22.1 13.5-10.9 7.2-22 14.1-32.6 21.7 9.7-11.3 18.6-23.1 27.8-34.8 5.8-7.6 11.4-15.3 17-23a211.7 211.7 0 0 0 15.3-24.4 0.6 0.6 0 0 0-1-0.7 211.5 211.5 0 0 0-19.2 21.3c-6 7.4-11.9 15-17.6 22.6-9 12.3-18.2 24.5-26.6 37.2 5-14.3 9-28.9 13.3-43.4 2.6-9.1 4.9-18.3 7.2-27.5a209.3 209.3 0 0 0 5.2-28.1 0.6 0.6 0 0 0-1.2-0.3 209.3 209.3 0 0 0-9.9 26.8c-2.8 9.1-5.5 18.2-7.9 27.3-3.6 14.2-7.6 28.4-10.6 42.8 0.1-6-0.1-11.9-0.3-17.8-0.5-10.2-1-20.4-1.8-30.6-1.8-20.3-3.1-40.7-6.6-61a1.2 1.2 0 0 0-2.4 0.2c-0.6 20.5 1.1 40.9 2.2 61.3 0.7 10.2 1.6 20.4 2.6 30.5 0.7 7 1.5 13.9 2.8 20.9-1.9-5-4-9.8-6.2-14.5-3.6-7.7-7.2-15.3-11.1-22.8-7.9-14.9-15.4-30.1-24.8-44.3a1.2 1.2 0 0 0-2.2 1.1c5.8 16 13.6 31 20.8 46.3 3.8 7.6 7.7 15 11.8 22.5 1.9 3.4 3.8 6.7 5.8 10-4-4.6-8.1-9-12.4-13.4-7.5-7.7-15-15.3-22.6-22.8-15.5-14.7-30.6-29.9-47.4-43.4a1.2 1.2 0 0 0-1.7 1.7c13.8 16.5 29.2 31.3 44.3 46.6 7.6 7.5 15.4 14.9 23.2 22.2 5.4 5 10.8 9.9 16.5 14.5-3.9-2.1-7.8-4-11.8-5.8-7.1-3.2-14.2-6.2-21.4-9.1-14.5-5.5-28.8-11.5-43.9-15.4a1.2 1.2 0 0 0-0.9 2.3c13.6 7.8 28 13.4 42.2 19.6 7.2 3 14.4 5.7 21.7 8.4a143.3 143.3 0 0 0 21.6 6.3 1.2 1.2 0 0 0 0.6 0.6 1.2 1.2 0 0 0 1 0c15.7-7.4 30.2-16.8 45.1-25.7 7.3-4.6 14.6-9.3 21.7-14.1a174.1 174.1 0 0 0 20.6-15.9 0.6 0.6 0 0 0 0.2-0.6z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_portfolio_80dp.xml"
            line="55"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1391 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M1297.3 817l-10.4-99-10.7-99.1a3.7 3.7 0 0 0-0.9-2l-31.9-38a3.9 3.9 0 0 0-1.3-1 3.8 3.8 0 0 0-5 1.9l-20 43.7a3.8 3.8 0 0 0-0.3 2l22.1 196.7 1.1 9.2c2.3 0.2 4.5 0.4 6.7 0.7l-1.1-10.7-21.2-195.8 10.3-22.4a36.5 36.5 0 0 0 16.5-3.4l17.7 21 10.9 96.6 11.3 97.8 2.1 17.5h5.6zm90-132a25 25 0 0 0-4.6-11 25.6 25.6 0 0 0-18.3-10.5c0.6-0.2 1.1-0.5 1.7-0.7a28.5 28.5 0 0 0 11.5-10.8c5.3-9.2 6.9-19.9 6.1-30.1-1.7-20.6-11.5-39.7-25-54.6l-0.1-0.1a3.7 3.7 0 0 0-6.2 1c-6 13.1-12.6 26.1-17.1 40.2-2.2 7-4.1 14.3-4.2 22a35.9 35.9 0 0 0 1.5 11.4 23.2 23.2 0 0 0 6.1 9.7 1 1 0 0 0 1.5-1.3c-4.2-5.6-5-12.6-4.2-19.4a89.7 89.7 0 0 1 5.4-20.2l0.1-0.3a49.7 49.7 0 0 1 7.2 2.1c2.9 1 5.4 3 9 5.1a21.2 21.2 0 0 0 12.4 2.3 19.4 19.4 0 0 0 6.2-1.6c0.3 1.5 0.5 3 0.6 4.5 0.9 9.2 0.2 18.8-3.9 26.9a22.5 22.5 0 0 1-21.9 13.5 0.7 0.7 0 0 0-0.7 0.5 0.7 0.7 0 0 0 0 0.2 25 25 0 0 0-10.3 3.5 25.6 25.6 0 0 0-12.3 19.7c-0.2 14.3 0 27.6 0 41.4l0.3 82.2 0.2 22.3q3 0.2 6.1 0.4l0.2-22.8 0.3-82.2 0.2-40.8a18.1 18.1 0 0 1 8.8-13.9 17.4 17.4 0 0 1 8-2.5c2.9-0.1 6.7 0 10 0a18.3 18.3 0 0 1 14.6 7.4 17.4 17.4 0 0 1 3.3 7.7c0.4 2.5 0.2 6.3 0.3 9.7l0.1 41.1 0.2 82.2 0.1 13.2a53.6 53.6 0 0 1 6.5-0.1l0.1-13.1 0.2-82.2 0.1-41.1c0-3.6 0.3-6.7-0.3-11zm-17.4-72.2a20.8 20.8 0 0 1-8.8-2.3c-2.8-1.4-6.4-3.7-10.6-4.6a20.3 20.3 0 0 0-7.3-0.3c4-9.8 8.7-19.3 13.4-28.9a104.4 104.4 0 0 1 12.3 19 81.5 81.5 0 0 1 6.3 17.4c-1.9-0.1-3.7-0.1-5.4-0.3z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_portfolio_80dp.xml"
            line="73"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1855 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M1264.1 886.7a306.2 306.2 0 0 1 5.2 36c1.1 12 2.1 24.1 2.9 36.1 1.3 24.1 3.2 48.2 2.5 72.5a1.4 1.4 0 0 1-2.7 0.2c-4-23.9-5.4-48-7.4-72.1-0.9-12-1.5-24.1-2.1-36.2a305.8 305.8 0 0 1 0.2-36.3 0.7 0.7 0 0 1 1.4-0.1zm-200 14.8c-4.8-7.4-9.7-14.8-14.8-22-2.6-3.7-4.7-7.2-7.9-11a39 39 0 0 0-11.1-8.9 38 38 0 0 0-13.7-4.3l-1.8-0.1c0.2-0.6 0.4-1.3 0.5-2a8.1 8.1 0 0 0 0.2-3.3 8.7 8.7 0 0 0-1.5-3.5 9.4 9.4 0 0 0-6.8-3.7l-5.3-0.1a9.7 9.7 0 0 0-7.1 3 9.3 9.3 0 0 0-2.5 7.3 8.5 8.5 0 0 0 0.5 2.1l-16.4-0.1-16.1 0.1c0.2-0.5 0.3-1.1 0.4-1.6a8.1 8.1 0 0 0 0.2-3.3 8.7 8.7 0 0 0-1.5-3.5 9.4 9.4 0 0 0-6.8-3.7l-5.3-0.1a9.7 9.7 0 0 0-7.1 3 9.3 9.3 0 0 0-2.5 7.3 8.5 8.5 0 0 0 0.6 2.3c-0.7 0-1.4 0.1-2.1 0.2a39.4 39.4 0 0 0-13.7 4.4 37.8 37.8 0 0 0-11 9.1c-2.9 3.8-5.3 7.2-7.9 10.9-5 7.3-10 14.6-14.6 22.1a0.6 0.6 0 0 0 1 0.8c6.1-6.5 11.8-13.2 17.5-20 2.9-3.3 5.6-7 8.3-10.1a34.2 34.2 0 0 1 9.7-7.2 32.9 32.9 0 0 1 11.5-3.5c3.8-0.4 8.5-0.1 12.9-0.1l26.5 0.2 26.5-0.2c4.3 0 9.1-0.2 12.9 0.1a34.3 34.3 0 0 1 11.6 3.3 33 33 0 0 1 9.7 7.2c2.6 2.9 5.4 6.8 8.1 10.1 5.5 6.9 11.1 13.8 16.7 20.6a1.3 1.3 0 0 0 2-1.5zM944.8 855a4.1 4.1 0 0 1-0.6-2.5 2.9 2.9 0 0 1 3.3-2.7l5-0.1a2.7 2.7 0 0 1 2.1 0.7 3.5 3.5 0 0 1 0.8 1 4.3 4.3 0 0 1 0.6 1.8c0.1 0.6 0.3 1.1 0.4 1.7L950 855h-5.3zm53.9-2.5a2.9 2.9 0 0 1 3.3-2.7l5-0.1a2.7 2.7 0 0 1 2.1 0.7 3.5 3.5 0 0 1 0.8 1 4.3 4.3 0 0 1 0.6 1.8c0.1 0.6 0.3 1.2 0.5 1.8-2.7 0-5.2 0-7.9-0.1h-3.8a4.1 4.1 0 0 1-0.7-2.5zm100.9 208.8a97.4 97.4 0 0 1-41.5 61.6 99.6 99.6 0 0 1-73.8 14.6 100.3 100.3 0 0 1 34.2-197.6 99.8 99.8 0 0 1 64.6 38.4 98 98 0 0 1 16.7 34.2 102 102 0 0 1 2.4 37.8 1.3 1.3 0 0 1-1.4 1.1 1.3 1.3 0 0 1-1.1-1.4 97.9 97.9 0 0 0-20.3-68.8 94.3 94.3 0 0 0-61.7-35.2c-24-3.3-49.1 2.8-68.5 17.2a94 94 0 0 0 36.4 168 95.6 95.6 0 0 0 36.1 0.6 97.6 97.6 0 0 0 33.8-13 93.2 93.2 0 0 0 26.8-24.7 97.2 97.2 0 0 0 16.1-33.1 0.6 0.6 0 0 1 1.2 0.3z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_portfolio_80dp.xml"
            line="79"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1231 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M1162.9 932.9a40.2 40.2 0 0 0-28.2-31.9 42.6 42.6 0 0 0-11.1-1.6l-10.5-0.1-20.9-0.1-243.8-0.1a56.1 56.1 0 0 0-38-22.7c-8.8-1-16.5-0.4-24.7-0.6-7.8-0.2-17 0-25.1 2.6a61.2 61.2 0 0 0-22.4 12.4 61.8 61.8 0 0 0-21.5 45.2v48.7l0.2 97.2 0.3 48.6 0.1 12.1c0.1 2.1-0.1 3.8 0.1 6.3a18.5 18.5 0 0 0 12.7 15.6 19.8 19.8 0 0 0 6.8 0.8l6.1-0.1 6-0.1c-8.8 0.3-14.7 0.5-15.8 0.6l222.9-0.7 83.7-0.5 83.7-0.4a38.9 38.9 0 0 0 34.9-21.7c3.4-6.4 4.2-14.1 4-21l0.1-20.9 0.4-83.7 0.2-41.8 0.1-20.9 0.1-10.5c0-3.3 0.2-7.1-0.5-10.8zm-419.8 227.7l-6.1-0.1a15.6 15.6 0 0 1-5.2-0.7 13.2 13.2 0 0 1-7.5-6.4c-1.7-3-1.5-6.3-1.4-10.6l0.1-12.1 0.3-48.6 0.2-97.2 0.2-48.5a55.3 55.3 0 0 1 19.1-40 54 54 0 0 1 19.8-11c7.4-2.3 14.7-2.6 23-2.4 8 0.1 16.5-0.4 23.8 0.5a50.8 50.8 0 0 1 21.1 7.9c12.6 8.5 21.3 22.8 22.1 38 0.4 15.7 0.1 32.3 0.4 48.4l0.8 97.2 0.5 48.6 0.3 24.3c0.1 6.3-4.8 12-10.8 13.6-3 0.3-6.9 0.6-11.6 0.9q-44.5-1-89-1.6zm412.7-19.4a36.1 36.1 0 0 1-32.2 20.5l-83.7-0.4-83.7-0.5-104.7-0.6a16.9 16.9 0 0 0 6.1-12.4l0.3-24.4 0.5-48.6 0.8-97.2c0.1-16.3 0.3-32.2 0-48.8a54.4 54.4 0 0 0-6.8-23.3l239.8-0.1 20.9-0.1 10.5-0.1a36.8 36.8 0 0 1 9.5 1.3 34.8 34.8 0 0 1 24.7 27.3c1 6.2 0.4 13.6 0.6 20.4l0.1 20.9 0.2 41.8 0.4 83.7 0.1 20.9c0.2 7-0.5 13.6-3.5 19.7z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_portfolio_80dp.xml"
            line="85"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (2379 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M1108.4 1120.8c3-1.8 7.7 0 9.4 3.7a9.9 9.9 0 0 1-1.9 11.4 10.1 10.1 0 0 1-11.3 1.8c-3.6-1.7-5.6-6-4.4-9.3a1.4 1.4 0 0 1 2.5-0.2l0.1 0.2c2.3 4.3 6.3 4.4 8 2.4a4.3 4.3 0 0 0 1.1-3.8 7.9 7.9 0 0 0-3.5-4.9h-0.1a0.7 0.7 0 0 1-0.2-1 0.8 0.8 0 0 1 0.3-0.3zM924.6 952.2a218 218 0 0 1-29.7 2.6l-7.4 0.2h-1.9a13.6 13.6 0 0 1-2.4-0.1 7.9 7.9 0 0 1-5.4-3.5c-1.3-1.7-1.3-4.7-1.3-5.5v-9.3a17.1 17.1 0 0 1 0.1-2.4 8 8 0 0 1 6.6-6.7 13.5 13.5 0 0 1 2.5-0.1l7.4 0.1 14.8 0.3 7.4 0.3 3.7 0.1c0.9 0 3.5 0.1 4.9 1.3a6.8 6.8 0 0 1 2.8 4.8 28.5 28.5 0 0 1-0.2 4.1c-0.2 2.5-0.4 4.9-0.7 7.4a1.3 1.3 0 0 1-2.5 0c-0.3-2.5-0.5-4.9-0.7-7.4-0.1-1.1-0.1-2.8-0.3-3.3a2 2 0 0 0-1.1-1.3c-0.4-0.4-3.6 0.1-5.9 0l-7.4 0.3-14.8 0.3-7.4 0.1c-1.7 0-1.2 0-1.6 0.2a0.9 0.9 0 0 0-0.3 0.6v6.9c0 2.3-0.1 5.8 0.1 5.4a0.9 0.9 0 0 0 0.6 0.5 8.2 8.2 0 0 0 1.3 0.1h1.9l7.4 0.2a217.9 217.9 0 0 1 29.7 2.6 0.6 0.6 0 0 1 0 1.3zm-190.8-52.9a27.3 27.3 0 0 1 18.1 3.4c5.6 3.3 9.5 8.4 13.3 12.8s7.6 8.2 12.3 10.4 10 3 15.5 3a37.9 37.9 0 0 0 15.8-3.1c4.9-2.2 9.1-5.8 13.3-9.7s8.5-8.5 14.2-11.5a31.5 31.5 0 0 1 18.2-3.6 1.3 1.3 0 0 1 0 2.5 33.1 33.1 0 0 0-15.6 5.3c-4.5 3.1-8.3 7.3-12.4 11.6s-9 8.6-14.8 11.4a44.8 44.8 0 0 1-18.6 4.2 39.4 39.4 0 0 1-18.8-3.9c-6-3-10.5-8-14.1-12.7s-6.8-9.4-11-12.8-9.6-5.2-15.4-6.1a0.6 0.6 0 0 1 0-1.3zm427.7 42a62.4 62.4 0 0 1-1.1 20.7c-1.5 6.8-3.9 13.3-6.2 19.7-5 12.5-8.4 25.2-8.3 38.3a84.3 84.3 0 0 0 1.7 19.4 114.7 114.7 0 0 0 6.1 18.8c2.4 6.3 5.2 12.6 6.8 19.5a67.2 67.2 0 0 1 1.6 20.8 1.3 1.3 0 0 1-1.4 1.2 1.3 1.3 0 0 1-1.2-1.2 84.3 84.3 0 0 0-3.9-19.4 190.6 190.6 0 0 0-7.7-18.5 109.3 109.3 0 0 1-7-19.7 91.3 91.3 0 0 1-2.3-21c0-14.1 4.3-28 9.5-40.5 5.6-12.4 10.4-24.5 12-38a0.6 0.6 0 0 1 0.7-0.6 0.6 0.6 0 0 1 0.6 0.6zm-440.7-21.4c0.3 16-1.3 32.3-6.4 47.8a104.8 104.8 0 0 1-25.8 41.1c-11.5 11.6-25.3 20.4-38.4 29.5s-26 18.7-32.5 32.3c-6.5 13.4-5.7 30.2-1 44.3 5.2 14.2 17.5 24.7 31.4 31.2s29.5 10.2 45.1 12.4a357.7 357.7 0 0 0 47.4 3c63.7 0.1 127.2 0.1 189.9-11.8s125 29.6 186.6 12.6a1.3 1.3 0 0 1 1.6 0.9 1.3 1.3 0 0 1-0.8 1.6c-30.6 9.7-58.7 7.1-92.5-0.7-37.9-9.7-62.3-14.8-93.7-8.3s-63.1 10.8-94.9 15-63.9-2-96.2-2a347.7 347.7 0 0 1-48.4-3.3c-16-2.4-32.1-6.1-47.1-13.2a79.2 79.2 0 0 1-20.7-14 56.2 56.2 0 0 1-14-21.1 73.3 73.3 0 0 1-4-24.7 56 56 0 0 1 5.4-24.6c7.7-15.6 21.9-25.4 35.1-34.3 13.4-8.9 26.8-17.4 38.2-28.2a100.8 100.8 0 0 0 26-38.8c6.1-15.8 7.9-30.7 8.3-46.7a0.6 0.6 0 0 1 1.3 0z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_portfolio_80dp.xml"
            line="88"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (1572 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M158.2 433.9c17.5-0.8 35-1.2 52.5-1.5s35-0.3 52.5-0.5 35 0.2 52.5 0.3c17.5 0.4 35 0.7 52.5 1.7a4 4 0 0 1 0 8.1c-17.5 0.9-35 1.3-52.5 1.7-17.5 0.1-35 0.4-52.5 0.3s-35-0.1-52.5-0.5-35-0.7-52.5-1.5a4 4 0 0 1 0-8.1zm0 64.2c17.5-0.8 35-1.2 52.5-1.5s35-0.3 52.5-0.5 35 0.2 52.5 0.3c17.5 0.4 35 0.7 52.5 1.7a4 4 0 0 1 0 8.1c-17.5 0.9-35 1.3-52.5 1.7-17.5 0.1-35 0.4-52.5 0.3s-35-0.1-52.5-0.5-35-0.7-52.5-1.5a4 4 0 0 1 0-8.1zm0 67.6c17.5-0.8 35-1.2 52.5-1.5s35-0.3 52.5-0.5 35 0.2 52.5 0.3c17.5 0.4 35 0.7 52.5 1.7a4 4 0 0 1 0 8.1c-17.5 0.9-35 1.3-52.5 1.7-17.5 0.1-35 0.4-52.5 0.3s-35-0.1-52.5-0.5-35-0.7-52.5-1.5a4 4 0 0 1 0-8.1zm0 61.6c17.5-0.8 35-1.2 52.5-1.5s35-0.3 52.5-0.5 35 0.2 52.5 0.3c17.5 0.4 35 0.7 52.5 1.7a4 4 0 0 1 0 8.1c-17.5 0.9-35 1.3-52.5 1.7-17.5 0.1-35 0.4-52.5 0.3s-35-0.1-52.5-0.5-35-0.7-52.5-1.5a4 4 0 0 1 0-8.1zm0 64.2c17.5-0.8 35-1.2 52.5-1.5s35-0.3 52.5-0.5 35 0.2 52.5 0.3c17.5 0.4 35 0.7 52.5 1.7a4 4 0 0 1 0 8.1c-17.5 0.9-35 1.3-52.5 1.7-17.5 0.1-35 0.4-52.5 0.3s-35-0.1-52.5-0.5-35-0.7-52.5-1.5a4 4 0 0 1 0-8.1zm0 67.5c17.5-0.8 35-1.2 52.5-1.5s35-0.3 52.5-0.5 35 0.2 52.5 0.3c17.5 0.4 35 0.7 52.5 1.7a4 4 0 0 1 0 8.1c-17.5 0.9-35 1.3-52.5 1.7-17.5 0.1-35 0.4-52.5 0.3s-35-0.1-52.5-0.5-35-0.7-52.5-1.5a4 4 0 0 1 0-8.1zm60.4 159.6c12.4-0.8 24.9-1.2 37.4-1.5s24.9-0.3 37.4-0.5 24.9 0 37.4 0.3 24.9 0.7 37.4 1.7a4 4 0 0 1 0 8.1c-12.4 0.9-24.9 1.3-37.4 1.7s-24.9 0.4-37.4 0.3-24.9-0.1-37.4-0.5-24.9-0.7-37.4-1.5a4 4 0 0 1 0-8.1zm603-277.2H1150s-12.4-75.7-51.5-86.5c-34.3-9.5-48.1 11.5-76.7 11.5-22.9 0-31.9-53.9-75.4-53.9-82.4 0-124.9 128.9-124.9 128.9z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_website_80dp.xml"
            line="34"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (821 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M1084.1 945.7a288.9 288.9 0 0 1 33.3-2.4c11.1-0.3 22.2-0.4 33.3-0.4 22.2 0.4 44.4 0.2 66.7 2.2a1.2 1.2 0 0 1 0 2.4c-22.2 2-44.4 1.9-66.7 2.2-11.1 0.1-22.2-0.1-33.3-0.4a289 289 0 0 1-33.3-2.4 0.6 0.6 0 0 1 0-1.2zm0 30.2a288.9 288.9 0 0 1 33.3-2.4c11.1-0.3 22.2-0.4 33.3-0.4 22.2 0.4 44.4 0.2 66.7 2.2a1.2 1.2 0 0 1 0 2.4c-22.2 2-44.4 1.9-66.7 2.2-11.1 0.1-22.2-0.1-33.3-0.4a289 289 0 0 1-33.3-2.4 0.6 0.6 0 0 1 0-1.2zm0 36.3a288.9 288.9 0 0 1 33.3-2.4c11.1-0.3 22.2-0.4 33.3-0.4 22.2 0.4 44.4 0.2 66.7 2.2a1.2 1.2 0 0 1 0 2.4c-22.2 2-44.4 1.9-66.7 2.2-11.1 0.1-22.2-0.1-33.3-0.4a289 289 0 0 1-33.3-2.4 0.6 0.6 0 0 1 0-1.2zm-36.3 15.8c-3.1 11.4-41.2 15.1-62.7 15.2h-0.3c-21.5 0-59.6-3.8-62.7-15.2-3.6-13.3 23.3-41.7 62.7-41.9h0.3c39.4 0.1 66.3 28.5 62.7 41.9zm-62.7-49.1a31.3 31.3 0 1 0-31.3-31.3 31.3 31.3 0 0 0 31.3 31.3z&quot;/>"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/drawable/img_type_website_80dp.xml"
            line="52"
            column="27"/>
    </issue>

    <issue
        id="VectorPath"
        severity="Error"
        message="Very long vector path (847 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector."
        category="Performance"
        priority="5"
        summary="Long vector paths"
        explanation="Using long vector paths is bad for performance. There are several ways to make the `pathData` shorter:&#xA;* Using less precision&#xA;* Removing some minor details&#xA;* Using the Android Studio vector conversion tool&#xA;* Rasterizing the image (converting to PNG)"
        errorLine1="        android:pathData=&quot;M16,2.7C8.6,2.7 2.7,8.6 2.7,16s6,13.3 13.3,13.3s13.3,-6 13.3,-13.3S23.4,2.7 16,2.7zM4.7,16c0,-1.6 0.4,-3.2 1,-4.6l5.4,14.8C7.3,24.4 4.7,20.5 4.7,16zM16,27.3c-1.1,0 -2.2,-0.2 -3.2,-0.5l3.4,-9.9l3.5,9.5c0,0.1 0.1,0.1 0.1,0.2C18.6,27.1 17.3,27.3 16,27.3L16,27.3zM17.6,10.7c0.7,0 1.3,-0.1 1.3,-0.1c0.6,-0.1 0.5,-1 -0.1,-0.9c0,0 -1.8,0.1 -3,0.1c-1.1,0 -3,-0.1 -3,-0.1c-0.6,0 -0.7,0.9 -0.1,0.9c0,0 0.6,0.1 1.2,0.1l1.8,4.8L13.2,23L9.1,10.7c0.7,0 1.3,-0.1 1.3,-0.1c0.6,-0.1 0.5,-1 -0.1,-0.9c0,0 -1.8,0.1 -3,0.1c-0.2,0 -0.5,0 -0.7,0c2,-3.1 5.5,-5.1 9.5,-5.1c3,0 5.6,1.1 7.7,3c0,0 -0.1,0 -0.1,0c-1.1,0 -1.9,1 -1.9,2c0,0.9 0.5,1.7 1.1,2.7c0.4,0.8 0.9,1.7 0.9,3.1c0,1 -0.4,2.1 -0.9,3.7l-1.1,3.8C21.7,22.9 17.6,10.7 17.6,10.7zM21.7,25.8l3.5,-10c0.6,-1.6 0.9,-2.9 0.9,-4.1c0,-0.4 0,-0.8 -0.1,-1.2c0.9,1.6 1.4,3.5 1.4,5.4C27.3,20.2 25.1,23.8 21.7,25.8L21.7,25.8z&quot; >"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/drawable/login_toolbar_icon.xml"
            line="10"
            column="27"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/comment_action_footer.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="                        &lt;LinearLayout"
        errorLine2="                        ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout-sw720dp/stats_activity.xml"
            line="109"
            column="25"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="                        &lt;LinearLayout"
        errorLine2="                        ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout-sw720dp/stats_activity.xml"
            line="170"
            column="25"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/stats_insights_all_time_item.xml"
            line="12"
            column="5"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/stats_insights_all_time_item.xml"
            line="111"
            column="5"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/stats_insights_latest_post_item.xml"
            line="31"
            column="5"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/stats_insights_today_item.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="        &lt;LinearLayout"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/stats_visitors_and_views_fragment.xml"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="        &lt;LinearLayout"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/stats_visitors_and_views_fragment.xml"
            line="102"
            column="9"/>
    </issue>

    <issue
        id="DisableBaselineAlignment"
        severity="Warning"
        message="Set `android:baselineAligned=&quot;false&quot;` on this element for better performance"
        category="Performance"
        priority="3"
        summary="Missing `baselineAligned` attribute"
        explanation="When a LinearLayout is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster."
        errorLine1="    &lt;LinearLayout"
        errorLine2="    ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/layout/stats_widget_layout.xml"
            line="45"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/primary` with a theme that also paints a background (inferred theme is `@style/WordPress_TransparentToolbarTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/primary&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/about_activity.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `#FFEEEEEE` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="  android:background=&quot;#FFEEEEEE&quot;>"
        errorLine2="  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/add_quickpress_shortcut.xml"
            line="6"
            column="3"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="              android:background=&quot;@android:color/white&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/comment_action_footer.xml"
            line="7"
            column="15"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/comment_detail_fragment.xml"
            line="11"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/CalypsoTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/comment_edit_activity.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/comment_listitem.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/snackbar_background` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/snackbar_background&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/dialog_snackbar.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/edit_post_preview_fragment.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/background_grey` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/background_grey&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/edit_post_settings_fragment.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/format_bar_background` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/format_bar_background&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout-w360dp/format_bar.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/format_bar_background` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/format_bar_background&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout-w380dp/format_bar.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/format_bar_background` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/format_bar_background&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout-w600dp/format_bar.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/format_bar_background` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/format_bar_background&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/format_bar.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/fragment_aztec_editor.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/fragment_edit_post_content.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/gutenberg_warning_dialog.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/background_grey` with a theme that also paints a background (inferred theme is `@style/CalypsoTheme_NoActionBarShadow`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/background_grey&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/help_activity.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/history_detail_fragment.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/home_row.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/transparent` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/transparent&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/learn_more_pref_screen.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/primary_400` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/primary_400&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout-land/login_intro_template_view.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/primary_400` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/primary_400&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout-sw600dp-land/login_intro_template_view.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/black` with a theme that also paints a background (inferred theme is `@style/Theme_AppCompat_NoActionBar`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/black&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/media_preview_activity.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/news_card.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/note_block_footer.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/note_block_user.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/people_invite_fragment.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/person_detail_fragment.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="                android:background=&quot;@android:color/white&quot;>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/photo_picker_fragment.xml"
            line="8"
            column="17"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:attr/selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/Calypso_NoActionBar`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:attr/selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/plugin_browser_row.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/Calypso_NoActionBar`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/post_preview_activity.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/promo_dialog.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/publicize_connect_button.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/publicize_listitem_connection.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/publicize_listitem_service.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/black` with a theme that also paints a background (inferred theme is `@style/ReaderMediaViewerTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="                android:background=&quot;@color/black&quot;>"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_activity_photo_viewer.xml"
            line="8"
            column="17"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/Calypso_NoActionBar`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_activity_subs.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_700` with a theme that also paints a background (inferred theme is `@style/ReaderMediaViewerTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_700&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_activity_video_player.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?attr/selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?attr/selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_bookmark_button.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_comments_post_header_view.xml"
            line="11"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?attr/selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?attr/selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_icon_count_view.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_include_comment_box.xml"
            line="12"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_include_post_detail_footer.xml"
            line="11"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_listitem_blog.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_listitem_comment.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_listitem_tag.xml"
            line="12"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_listitem_user.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_simple_post_view.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="             android:background=&quot;@android:color/white&quot;"
        errorLine2="             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_site_search_result.xml"
            line="7"
            column="14"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_tag_strip_label.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/related_posts_dialog.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/CalypsoTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/select_categories.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/signup_bottom_sheet_dialog.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/signup_bottom_sheet_dialog.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_creation_domain_header.xml"
            line="6"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_creation_domain_input.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@android:color/white` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@android:color/white&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_creation_domain_screen.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_creation_form_screen.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/CalypsoTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_picker_listitem.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_settings_tag_detail_fragment.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?android:attr/selectableItemBackground` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?android:attr/selectableItemBackground&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/start_over_preference.xml"
            line="10"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/CalypsoTheme`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot;>"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/stats_activity_view_all.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/stats_insights_header_line.xml"
            line="5"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/neutral_0` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/neutral_0&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/stats_vertical_line.xml"
            line="4"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `?attr/colorPrimary` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;?attr/colorPrimary&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/toolbar.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/primary_500` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/primary_500&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/toolbar_login.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/login_toolbar_color` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/login_toolbar_color&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/toolbar_login.xml"
            line="9"
            column="5"/>
    </issue>

    <issue
        id="Overdraw"
        severity="Warning"
        message="Possible overdraw: Root element paints background `@color/color_primary` with a theme that also paints a background (inferred theme is `@style/WordPress`)"
        category="Performance"
        priority="3"
        summary="Overdraw: Painting regions more than once"
        explanation="If you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called &quot;overdraw&quot;.&#xA;&#xA;NOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it&apos;s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.&#xA;&#xA;If you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.&#xA;&#xA;Of course it&apos;s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead."
        errorLine1="    android:background=&quot;@color/color_primary&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/toolbar_main.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="TypographyFractions"
        severity="Warning"
        message="Use fraction character ¾ (&amp;#190;) instead of 3/4 ?"
        category="Usability:Typography"
        priority="5"
        summary="Fraction string can be replaced with fraction character"
        explanation="You can replace certain strings, such as 1/2, and 1/4, with dedicated characters for these, such as ½ (&amp;#189;) and ¼ (&amp;#188;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Number_Forms"
        urls="http://en.wikipedia.org/wiki/Number_Forms"
        errorLine1="    &lt;string name=&quot;site_creation_label_site_details_title&quot;>Adım 3/4&lt;/string>"
        errorLine2="                                                          ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/values-tr/strings.xml"
            line="476"
            column="59"/>
    </issue>

    <issue
        id="TypographyFractions"
        severity="Warning"
        message="Use fraction character ¼ (&amp;#188;) instead of 1/4 ?"
        category="Usability:Typography"
        priority="5"
        summary="Fraction string can be replaced with fraction character"
        explanation="You can replace certain strings, such as 1/2, and 1/4, with dedicated characters for these, such as ½ (&amp;#189;) and ¼ (&amp;#188;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Number_Forms"
        urls="http://en.wikipedia.org/wiki/Number_Forms"
        errorLine1="    &lt;string name=&quot;site_creation_label_category_title&quot;>Adım 1/4&lt;/string>"
        errorLine2="                                                      ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/values-tr/strings.xml"
            line="487"
            column="55"/>
    </issue>

    <issue
        id="TypographyFractions"
        severity="Warning"
        message="Use fraction character ¾ (&amp;#190;) instead of 3/4 ?"
        category="Usability:Typography"
        priority="5"
        summary="Fraction string can be replaced with fraction character"
        explanation="You can replace certain strings, such as 1/2, and 1/4, with dedicated characters for these, such as ½ (&amp;#189;) and ¼ (&amp;#188;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Number_Forms"
        urls="http://en.wikipedia.org/wiki/Number_Forms"
        errorLine1="    &lt;string name=&quot;notification_site_creation_step_tagline&quot;>Adım 3/4&lt;/string>"
        errorLine2="                                                           ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/values-tr/strings.xml"
            line="492"
            column="60"/>
    </issue>

    <issue
        id="TypographyFractions"
        severity="Warning"
        message="Use fraction character ¼ (&amp;#188;) instead of 1/4 ?"
        category="Usability:Typography"
        priority="5"
        summary="Fraction string can be replaced with fraction character"
        explanation="You can replace certain strings, such as 1/2, and 1/4, with dedicated characters for these, such as ½ (&amp;#189;) and ¼ (&amp;#188;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Number_Forms"
        urls="http://en.wikipedia.org/wiki/Number_Forms"
        errorLine1="    &lt;string name=&quot;notification_site_creation_step_creating&quot;>Adım 1/4&lt;/string>"
        errorLine2="                                                            ^"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/values-tr/strings.xml"
            line="494"
            column="61"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-hdpi`: rppreview1.png, rppreview2.png, rppreview3.png"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="../WordPress/src/main/res/drawable-hdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-xxhdpi`: btn_cab_done_default_wordpress.9.png, btn_cab_done_focused_wordpress.9.png, btn_cab_done_pressed_wordpress.9.png, list_focused_wordpress.9.png, menu_dropdown_panel_wordpress.9.png... (4 more)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="../WordPress/src/main/res/drawable-xxhdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in `drawable-xxhdpi`: list_focused_wordpress.9.png (found in drawable-hdpi, drawable-xhdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Icon densities validation"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/drawable-xxhdpi"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-mdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="../WordPress/src/main/res"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-mdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="../libs/editor/WordPressEditor/src/main/res"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-mdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res"/>
    </issue>

    <issue
        id="AlwaysShowAction"
        severity="Warning"
        message="Prefer &quot;`ifRoom`&quot; instead of &quot;`always`&quot;"
        category="Usability"
        priority="3"
        summary="Usage of `showAsAction=always`"
        explanation="Using `showAsAction=&quot;always&quot;` in menu XML, or `MenuItem.SHOW_AS_ACTION_ALWAYS` in Java code is usually a deviation from the user interface style guide.Use `ifRoom` or the corresponding `MenuItem.SHOW_AS_ACTION_IF_ROOM` instead.&#xA;&#xA;If `always` is used sparingly there are usually no problems and behavior is roughly equivalent to `ifRoom` but with preference over other `ifRoom` items. Using it more than twice in the same menu is a bad idea.&#xA;&#xA;This check looks for menu XML files that contain more than two `always` actions, or some `always` actions and no `ifRoom` actions. In Java code, it looks for projects that contain references to `MenuItem.SHOW_AS_ACTION_ALWAYS` and no references to `MenuItem.SHOW_AS_ACTION_IF_ROOM`."
        url="http://developer.android.com/design/patterns/actionbar.html"
        urls="http://developer.android.com/design/patterns/actionbar.html"
        errorLine1="        app:showAsAction=&quot;always&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/menu/edit_post_legacy.xml"
            line="7"
            column="9"/>
        <location
            file="../WordPress/src/main/res/menu/edit_post_legacy.xml"
            line="11"
            column="9"/>
    </issue>

    <issue
        id="AlwaysShowAction"
        severity="Warning"
        message="Prefer &quot;`ifRoom`&quot; instead of &quot;`always`&quot;"
        category="Usability"
        priority="3"
        summary="Usage of `showAsAction=always`"
        explanation="Using `showAsAction=&quot;always&quot;` in menu XML, or `MenuItem.SHOW_AS_ACTION_ALWAYS` in Java code is usually a deviation from the user interface style guide.Use `ifRoom` or the corresponding `MenuItem.SHOW_AS_ACTION_IF_ROOM` instead.&#xA;&#xA;If `always` is used sparingly there are usually no problems and behavior is roughly equivalent to `ifRoom` but with preference over other `ifRoom` items. Using it more than twice in the same menu is a bad idea.&#xA;&#xA;This check looks for menu XML files that contain more than two `always` actions, or some `always` actions and no `ifRoom` actions. In Java code, it looks for projects that contain references to `MenuItem.SHOW_AS_ACTION_ALWAYS` and no references to `MenuItem.SHOW_AS_ACTION_IF_ROOM`."
        url="http://developer.android.com/design/patterns/actionbar.html"
        urls="http://developer.android.com/design/patterns/actionbar.html"
        errorLine1="        app:showAsAction=&quot;always&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/menu/reader_detail.xml"
            line="9"
            column="9"/>
        <location
            file="../WordPress/src/main/res/menu/reader_detail.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="AlwaysShowAction"
        severity="Warning"
        message="Prefer &quot;`ifRoom`&quot; instead of &quot;`always`&quot;"
        category="Usability"
        priority="3"
        summary="Usage of `showAsAction=always`"
        explanation="Using `showAsAction=&quot;always&quot;` in menu XML, or `MenuItem.SHOW_AS_ACTION_ALWAYS` in Java code is usually a deviation from the user interface style guide.Use `ifRoom` or the corresponding `MenuItem.SHOW_AS_ACTION_IF_ROOM` instead.&#xA;&#xA;If `always` is used sparingly there are usually no problems and behavior is roughly equivalent to `ifRoom` but with preference over other `ifRoom` items. Using it more than twice in the same menu is a bad idea.&#xA;&#xA;This check looks for menu XML files that contain more than two `always` actions, or some `always` actions and no `ifRoom` actions. In Java code, it looks for projects that contain references to `MenuItem.SHOW_AS_ACTION_ALWAYS` and no references to `MenuItem.SHOW_AS_ACTION_IF_ROOM`."
        url="http://developer.android.com/design/patterns/actionbar.html"
        urls="http://developer.android.com/design/patterns/actionbar.html"
        errorLine1="        app:showAsAction=&quot;always&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../WordPress/src/main/res/menu/reader_list.xml"
            line="9"
            column="9"/>
        <location
            file="../WordPress/src/main/res/menu/reader_list.xml"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view ``EditTextWithKeyBackListener`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        mTitle.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/AztecEditorFragment.java"
            line="233"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view ``AztecText`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        mContent.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/AztecEditorFragment.java"
            line="234"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view ``SourceViewEditText`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        mSource.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/AztecEditorFragment.java"
            line="235"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="`AztecEditorFragment#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View view, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/AztecEditorFragment.java"
            line="1361"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view `CustomSwipeRefreshLayout` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="../libs/utils/WordPressUtils/src/main/java/org/wordpress/android/util/widgets/CustomSwipeRefreshLayout.java"
            line="21"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view ``EditTextWithKeyBackListener`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        mSourceViewTitle.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/EditorFragment.java"
            line="359"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view ``EditTextWithKeyBackListener`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        mSourceViewContent.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/EditorFragment.java"
            line="360"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="`EditorFragment#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View view, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/EditorFragment.java"
            line="797"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view ``WPEditText`` has `setOnTouchListener` called on it but does not override `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="        mContentEditText.setOnTouchListener(this);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/LegacyEditorFragment.java"
            line="218"
            column="9"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="`LegacyEditorFragment#onTouch` should call `View#performClick` when a click is detected"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouch(View v, MotionEvent event) {"
        errorLine2="                   ~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/LegacyEditorFragment.java"
            line="674"
            column="20"/>
    </issue>

    <issue
        id="ClickableViewAccessibility"
        severity="Error"
        message="Custom view `RippleToggleButton` overrides `onTouchEvent` but not `performClick`"
        category="Accessibility"
        priority="6"
        summary="Accessibility in Custom Views"
        explanation="If a `View` that overrides `onTouchEvent` or uses an `OnTouchListener` does not also implement `performClick` and call it when clicks are detected, the `View` may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in `View#performClick` as some accessibility services invoke `performClick` when a click action should occur."
        errorLine1="    public boolean onTouchEvent(@NonNull MotionEvent event) {"
        errorLine2="                   ~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/java/org/wordpress/android/editor/RippleToggleButton.java"
            line="83"
            column="20"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Error"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="142"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Error"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/format_bar.xml"
            line="104"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Error"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_request_screen.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Error"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="                &lt;ImageView"
        errorLine2="                ^"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_magic_link_request_screen.xml"
            line="28"
            column="17"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Error"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_username_password_screen.xml"
            line="29"
            column="13"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Error"
        message="Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.&#xA;&#xA;Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.&#xA;&#xA;Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_username_password_screen.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`@id/read_reviews_container` can overlap `@id/rating_bar` if @id/read_reviews_container grows due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="        &lt;LinearLayout"
        errorLine2="        ^">
        <location
            file="../WordPress/src/main/res/layout/plugin_ratings_cardview.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`@id/text_num_downloads` can overlap `@id/text_num_ratings` if @id/text_num_ratings, @id/text_num_downloads grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="            &lt;TextView"
        errorLine2="            ^">
        <location
            file="../WordPress/src/main/res/layout/plugin_ratings_cardview.xml"
            line="212"
            column="13"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`@id/reply_container` can overlap `@id/text_comment_date` if @id/text_comment_date, @id/reply_container grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="            &lt;LinearLayout"
        errorLine2="            ^">
        <location
            file="../WordPress/src/main/res/layout/reader_listitem_comment.xml"
            line="86"
            column="13"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`@id/stats_views_totals` can overlap `@id/stats_views_label` if @string/stats_default_number_zero, @string/stats_default_number_zero grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                    &lt;org.wordpress.android.widgets.WPTextView"
        errorLine2="                    ^">
        <location
            file="../WordPress/src/main/res/layout/stats_activity_single_post_details.xml"
            line="73"
            column="21"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`org.wordpress.android.widgets.WPTextView-3` can overlap `org.wordpress.android.widgets.WPTextView-1` if @string/stats_period, @string/stats_total grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                    &lt;org.wordpress.android.widgets.WPTextView"
        errorLine2="                    ^">
        <location
            file="../WordPress/src/main/res/layout/stats_activity_single_post_details.xml"
            line="129"
            column="21"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`org.wordpress.android.widgets.WPTextView-3` can overlap `org.wordpress.android.widgets.WPTextView-1` if @string/stats_period, @string/stats_overall grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                    &lt;org.wordpress.android.widgets.WPTextView"
        errorLine2="                    ^">
        <location
            file="../WordPress/src/main/res/layout/stats_activity_single_post_details.xml"
            line="191"
            column="21"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`org.wordpress.android.widgets.WPTextView-3` can overlap `org.wordpress.android.widgets.WPTextView-1` if @string/stats_period, @string/stats_total grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                    &lt;org.wordpress.android.widgets.WPTextView"
        errorLine2="                    ^">
        <location
            file="../WordPress/src/main/res/layout/stats_activity_single_post_details.xml"
            line="253"
            column="21"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`@id/stats_list_totals_label` can overlap `@id/stats_list_entry_label` if @id/stats_list_entry_label, @id/stats_list_totals_label grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                    &lt;org.wordpress.android.widgets.WPTextView"
        errorLine2="                    ^">
        <location
            file="../WordPress/src/main/res/layout/stats_expandable_list_fragment.xml"
            line="94"
            column="21"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`@id/stats_list_totals_label` can overlap `@id/stats_list_entry_label` if @id/stats_list_entry_label, @id/stats_list_totals_label grow due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                    &lt;org.wordpress.android.widgets.WPTextView"
        errorLine2="                    ^">
        <location
            file="../WordPress/src/main/res/layout/stats_list_fragment.xml"
            line="92"
            column="21"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`LinearLayout-1` can overlap `LinearLayout-3` if LinearLayout-1 grows due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="            &lt;LinearLayout"
        errorLine2="            ^">
        <location
            file="../WordPress/src/main/res/layout-sw600dp/theme_grid_cardview_header.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="RelativeOverlap"
        severity="Error"
        message="`LinearLayout-1` can overlap `LinearLayout-3` if LinearLayout-1 grows due to localized text expansion"
        category="Internationalization"
        priority="3"
        summary="Overlapping items in RelativeLayout"
        explanation="If relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like `toEndOf`/`toStartOf`."
        errorLine1="                &lt;LinearLayout"
        errorLine2="                ^">
        <location
            file="../WordPress/src/main/res/layout/theme_grid_item.xml"
            line="46"
            column="17"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingEnd` you should probably also define `paddingStart` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingEnd=&quot;@dimen/margin_large&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/comment_listitem.xml"
            line="101"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingStart=&quot;@dimen/start_over_preference_margin_small&quot;/>"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/domain_removal_preference.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingLeft` you should probably also define `paddingRight` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingLeft=&quot;16dp&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/fragment_edit_post_content.xml"
            line="69"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingStart=&quot;16dp&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/fragment_edit_post_content.xml"
            line="70"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingEnd` you should probably also define `paddingStart` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingEnd=&quot;8dip&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/home_row.xml"
            line="44"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingRight` you should probably also define `paddingLeft` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingRight=&quot;@dimen/textinputlayout_correction_padding_right&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_input_row.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingEnd` you should probably also define `paddingStart` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingEnd=&quot;@dimen/textinputlayout_correction_padding_right&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_input_row.xml"
            line="40"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingEnd` you should probably also define `paddingStart` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="    android:paddingEnd=&quot;@dimen/margin_extra_extra_large&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout-sw600dp-land/login_intro_template_view.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingEnd` you should probably also define `paddingStart` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="                android:paddingEnd=&quot;@dimen/margin_medium&quot; >"
        errorLine2="                ~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_cardview_post.xml"
            line="220"
            column="17"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingStart=&quot;@dimen/margin_small&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/reader_include_comment_box.xml"
            line="55"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingStart=&quot;@dimen/margin_small&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_settings_format_dialog.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingStart=&quot;@dimen/margin_small&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/site_settings_format_dialog.xml"
            line="55"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="            android:paddingStart=&quot;@dimen/start_over_title_margin&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/start_over_preference.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingStart` you should probably also define `paddingEnd` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="        android:paddingStart=&quot;@dimen/start_over_preference_margin_small&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/start_over_preference.xml"
            line="51"
            column="9"/>
    </issue>

    <issue
        id="RtlSymmetry"
        severity="Error"
        message="When you define `paddingEnd` you should probably also define `paddingStart` for right-to-left symmetry"
        category="Internationalization:Bidirectional Text"
        priority="6"
        summary="Padding and margin symmetry"
        explanation="If you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry."
        errorLine1="                    android:paddingEnd=&quot;@dimen/margin_medium&quot;/>"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~">
        <location
            file="../WordPress/src/main/res/layout/stats_visitors_and_views_fragment.xml"
            line="91"
            column="21"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentRight`; already defining `layout_alignParentEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/alert_create_link.xml"
            line="31"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_marginLeft=&quot;@dimen/margin_medium&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/alert_create_link.xml"
            line="32"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_toLeftOf`; already defining `layout_toStartOf` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="    android:layout_toLeftOf=&quot;@id/ok&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/alert_create_link.xml"
            line="41"
            column="5"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginLeft=&quot;@dimen/image_settings_dialog_thumbnail_left_margin&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="26"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginRight=&quot;@dimen/image_settings_dialog_thumbnail_right_margin&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="28"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginLeft=&quot;@dimen/image_settings_dialog_filename_margin_left&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="50"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginLeft=&quot;@dimen/image_settings_dialog_input_field_start_margin&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="111"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_toRightOf`; already defining `layout_toEndOf` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_toRightOf=&quot;@+id/image_icon&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="152"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginLeft=&quot;@dimen/image_settings_dialog_input_field_start_margin&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/dialog_image_options.xml"
            line="172"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingLeft`; already defining `paddingStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:paddingLeft=&quot;16dp&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/fragment_edit_post_content.xml"
            line="69"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `drawableLeft`; already defining `drawableStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:drawableLeft=&quot;@drawable/ic_post_settings&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/editor/WordPressEditor/src/main/res/layout/fragment_edit_post_content.xml"
            line="72"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginLeft=&quot;@dimen/margin_extra_large&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_email_password_screen.xml"
            line="42"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingRight`; already defining `paddingEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingRight=&quot;@dimen/margin_medium&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_email_screen.xml"
            line="60"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/margin_medium&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_email_screen.xml"
            line="69"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingRight`; already defining `paddingEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingRight=&quot;@dimen/margin_medium&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_email_screen.xml"
            line="95"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/margin_medium&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_email_screen.xml"
            line="105"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingLeft`; already defining `paddingStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;@dimen/margin_small_medium&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_form_screen.xml"
            line="31"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingRight`; already defining `paddingEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingRight=&quot;@dimen/margin_medium_large&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_form_screen.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentLeft`; already defining `layout_alignParentStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_form_screen.xml"
            line="45"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_toLeftOf`; already defining `layout_toStartOf` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_toLeftOf=&quot;@+id/primary_button&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_form_screen.xml"
            line="47"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/margin_extra_large&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_form_screen.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentRight`; already defining `layout_alignParentEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_form_screen.xml"
            line="63"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_marginRight=&quot;@dimen/margin_extra_large&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_input_row.xml"
            line="15"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_toRightOf`; already defining `layout_toEndOf` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:layout_toRightOf=&quot;@+id/icon&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_input_row.xml"
            line="27"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/textinputlayout_correction_margin_right&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_input_row.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingRight`; already defining `paddingEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:paddingRight=&quot;@dimen/textinputlayout_correction_padding_right&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_input_row.xml"
            line="39"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingLeft`; already defining `paddingStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;@dimen/margin_small_medium&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_request_screen.xml"
            line="52"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingRight`; already defining `paddingEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingRight=&quot;@dimen/margin_medium_large&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_request_screen.xml"
            line="54"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentLeft`; already defining `layout_alignParentStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_request_screen.xml"
            line="67"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_toLeftOf`; already defining `layout_toStartOf` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_toLeftOf=&quot;@+id/login_request_magic_link&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_request_screen.xml"
            line="69"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="                android:layout_marginRight=&quot;@dimen/margin_extra_large&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_magic_link_request_screen.xml"
            line="73"
            column="17"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/margin_extra_large&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_request_screen.xml"
            line="75"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentRight`; already defining `layout_alignParentEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_request_screen.xml"
            line="85"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingLeft`; already defining `paddingStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;@dimen/margin_small_medium&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_sent_screen.xml"
            line="42"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingRight`; already defining `paddingEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingRight=&quot;@dimen/margin_medium_large&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_sent_screen.xml"
            line="44"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentLeft`; already defining `layout_alignParentStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentLeft=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_sent_screen.xml"
            line="57"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_toLeftOf`; already defining `layout_toStartOf` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_toLeftOf=&quot;@+id/login_open_email_client&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_sent_screen.xml"
            line="59"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/margin_extra_large&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_sent_screen.xml"
            line="65"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentRight`; already defining `layout_alignParentEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/login_magic_link_sent_screen.xml"
            line="75"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/textinputlayout_correction_padding&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_username_password_screen.xml"
            line="25"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginLeft=&quot;@dimen/margin_extra_large&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout/login_username_password_screen.xml"
            line="50"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginRight`; already defining `layout_marginEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginRight=&quot;@dimen/margin_medium&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/signup_bottom_sheet_dialog.xml"
            line="37"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_marginLeft`; already defining `layout_marginStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_marginLeft=&quot;@dimen/margin_medium&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/signup_bottom_sheet_dialog.xml"
            line="48"
            column="13"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingLeft`; already defining `paddingStart` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingLeft=&quot;@dimen/margin_small_medium&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/signup_magic_link.xml"
            line="56"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `paddingRight`; already defining `paddingEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="        android:paddingRight=&quot;@dimen/margin_medium_large&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/signup_magic_link.xml"
            line="57"
            column="9"/>
    </issue>

    <issue
        id="RtlHardcoded"
        severity="Error"
        message="Redundant attribute `layout_alignParentRight`; already defining `layout_alignParentEnd` with `targetSdkVersion` 26"
        category="Internationalization:Bidirectional Text"
        priority="5"
        summary="Using left/right instead of start/end attributes"
        explanation="Using `Gravity#LEFT` and `Gravity#RIGHT` can lead to problems when a layout is rendered in locales where text flows from right to left. Use `Gravity#START` and `Gravity#END` instead. Similarly, in XML `gravity` and `layout_gravity` attributes, use `start` rather than `left`.&#xA;&#xA;For XML attributes such as paddingLeft and `layout_marginLeft`, use `paddingStart` and `layout_marginStart`. **NOTE**: If your `minSdkVersion` is less than 17, you should add **both** the older left/right attributes **as well as** the new start/right attributes. On older platforms, where RTL is not supported and the start/right attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.&#xA;&#xA;(Note: For `Gravity#LEFT` and `Gravity#START`, you can use these constants even when targeting older platforms, because the `start` bitmask is a superset of the `left` bitmask. Therefore, you can use `gravity=&quot;start&quot;` rather than `gravity=&quot;left|start&quot;`.)"
        errorLine1="            android:layout_alignParentRight=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="../libs/login/WordPressLoginFlow/src/main/res/layout-land/signup_magic_link.xml"
            line="65"
            column="13"/>
    </issue>

</issues>
